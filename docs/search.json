[{"path":"/articles/Clonotrace.html","id":"data","dir":"Articles","previous_headings":"","what":"data","title":"An R Markdown document converted from ","text":"first read data. demo data public vitro longitudinal experiment monitor hematopoiesis (https://www.science.org/doi/10.1126/science.aaw3381). can download demo data : https://upenn.box.com/s/9bxv50lueelrrf5zv4ked20dlkalrtir Within data, 34782 cells sampled 3 time points. data simple cell type compistion 3 cell types:  higher resolustion downstream analysis, cluster cells 9 cell clusters.","code":"seurat_object = readRDS(\"../../hematopoiesis.rds\") pca = seurat_object@reductions$pca@cell.embeddings umap = as.data.frame(seurat_object@reductions$umap@cell.embeddings) cell_meta = seurat_object@meta.data table(cell_meta$Time.point) ##  ##     2     4     6  ##  3407 11101 20274 cell_type_umap = dimplot(embedding = umap,annot = cell_meta,color_by = \"Cell.type.annotation\",size = 0.1,label_size = 5)+ NoLegend()+ theme(axis.text = element_blank(),         axis.ticks = element_blank())+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\") cell_type_umap cell_cluster_umap = dimplot(embedding = umap,annot = cell_meta,color_by = \"cluster\",size = 0.1,label_size = 5)+ NoLegend()+ theme(axis.text = element_blank(),         axis.ticks = element_blank())+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\") cell_cluster_umap"},{"path":"/articles/Clonotrace.html","id":"clone-label-spreading","dir":"Articles","previous_headings":"","what":"clone label spreading","title":"An R Markdown document converted from ","text":"first build cell kNN graph based within PCA space: define clone population cells share lineage barcode time point. Based definition 8108 clones total. 802 expanded 10 cells.  spread clone label cell graph smooth cell density expanding clones. bootstrap process filter propogation high deviance, usually regions high density lowly expanded unexpanded clones. ’s better run parallel.  can visualize deviance clone label spreading cell via cell UMAP, use 0.3 upper bound threshold deviance. Cells high deviance enriched undifferentiated cells, due haven’t proliferated enough expand clones.  filter cells high deviance, sparsify cell--clone probablity keeping top 90% mass can use example show cell clone assignment smoothed process:","code":"cell_knn = embedding2knn(embedding = as.matrix(pca),k = 30,mode = \"connectivity\",if_self = FALSE) cell_knn = compute_transition(cell_knn) clone_size = cell_meta %>% group_by(clone) %>% summarise(count = n()) expanded_clones = clone_size %>% filter(count >=10) clone_size_hist = ggplot(clone_size)+ geom_histogram(aes(x = sqrt(count)),binwidth = 1,color = \"black\",fill = \"steelblue\")+ geom_vline(xintercept = sqrt(10),linetype = \"dashed\",color = \"coral\",linewidth = 1)+ theme_classic()+ xlab(\"sqrt(clone size)\")+ ylab(\"clone count\") clone_size_hist cell_clone = data.frame(cell = rownames(cell_meta),clone = cell_meta[,\"clone\"]) %>%              mutate(clone = if_else(clone %in% expanded_clones$clone, clone, NA_character_)) start = Sys.time() plan(multisession,workers = 8) clone_labels = label_spreading_bootstrap(adj = cell_knn,labels = cell_clone$clone,                                               alpha = 0.6, sample_rate = 0.8,sample_n = 48) end = Sys.time() print(end-start) ## Time difference of 12.64555 mins cell_clone_prob_raw = clone_labels[[1]] deviance = clone_labels[[2]] rownames(cell_clone_prob_raw) = rownames(cell_meta) deviance_hist = ggplot()+ geom_histogram(aes(x = deviance),fill = \"coral\",color = \"black\",binwidth = 0.02)+ geom_vline(xintercept = 0.3,linetype = \"dashed\")+ theme_classic()+ ylab(\"cell count\") deviance_hist cell_meta$deviance = deviance deviance_umap = dimplot(umap,annot = cell_meta %>% filter(deviance > 0.3),color_by = \"deviance\",label = FALSE,size = 0.1)+ scale_color_viridis_c(name = \"deviance\",option = \"plasma\")+ theme_classic()+ theme(axis.text = element_blank(),         axis.ticks = element_blank())+ ggtitle(\"Cells with high deviance\") deviance_umap rownames(cell_clone_prob_raw) = rownames(cell_meta) cell_clone_prob = cell_clone_prob_raw[deviance < 0.3,] cell_clone_prob = cell_clone_prob/rowSums(cell_clone_prob) cell_clone_prob = mat_sparsify(mat = cell_clone_prob,row_mass = 0.9,col_mass = 0.9) cell_clone_prob = cell_clone_prob/rowSums(cell_clone_prob) cell_clone_prob = Matrix(cell_clone_prob, sparse = TRUE) colnames(cell_clone_prob) = names(table(cell_clone$clone)) example_clone = \"Lineage-1193-6\" clone_example_umap_raw = dimplot(umap,annot = cell_meta %>% filter(clone == example_clone) %>% mutate(group = \"1\"),                                  color_by = \"group\",label = FALSE,size = 2)+ theme_classic()+ NoLegend()+ theme(axis.text = element_blank(),           axis.ticks = element_blank())  clone_example_umap_raw cell_meta$prob = NA cell_meta[rownames(cell_clone_prob),]$prob = cell_clone_prob[,example_clone] umap$prob = cell_meta$prob clone_example_umap_smooth = ggplot(mapping = aes(x= umap_1,y = umap_2))+ geom_point(data = umap,color = \"lightgrey\",size = 0.1)+ geom_point(data = umap %>% filter(prob > 0.025) %>% arrange(prob),            aes(color = prob),size = 2,alpha = 0.5)+ scale_color_viridis_c(name = \"prob\",option = \"turbo\")+ theme_classic()+ theme(axis.text = element_blank(),          axis.ticks = element_blank()) clone_example_umap_smooth = ggrastr::rasterize(clone_example_umap_smooth,layers='Point', dpi=300) clone_example_umap_smooth"},{"path":"/articles/Clonotrace.html","id":"clonewise-transcriptomic-distance","dir":"Articles","previous_headings":"","what":"Clonewise transcriptomic distance","title":"An R Markdown document converted from ","text":"smooth cell density expanded clone cell transcriptomic embedding, can measure cell distribution difference via optimal transportation distance. provide two methods , first one calculate exact optimal transportation distance, second one faster approximation, less accurate. can switch modes exact parameter clone_disance function. step time memory consuming, can take hours even approximation. strongly recommend put step server cluster run multiple cores. (reference, approximation method takes 40 minutes run HPC paralleled 4 cores using 8 Gb RAM). time efficiency, can use pre-computed clone-wise distance downstream applicaitons.","code":"file_path <- system.file(\"extdata\", \"clone_graph_dis.rds\", package = \"Clonotrace\") clone_dis = readRDS(file_path)"},{"path":"/articles/Clonotrace.html","id":"clone-embedding-visualization","dir":"Articles","previous_headings":"","what":"clone embedding visualization","title":"An R Markdown document converted from ","text":"first cluster clones using leiden algorithm visualize clone community UMAP.  can also visualize clone embedding low dimension reduction like diffusion map:  Diffusion map good layout continous movement clones time.","code":"set.seed(1230) clone_cluster = leiden_dis(dismat = clone_dis,k = 20,resolution = 0.5,if_umap = TRUE) ## Found more than one class \"dist\" in cache; using the first, from namespace 'spam' ## Also defined by 'BiocGenerics' clone_cluster_center = clone_cluster %>% group_by(cluster) %>% summarise_all(median) clone_cluster$mass = colSums(cell_clone_prob) clone_leiden_umap = ggplot(mapping = aes(x = umap1,y = umap2))+ geom_point(data = clone_cluster,aes(fill = cluster,size = log2(mass)),pch=21,color = \"black\",alpha = 0.75)+ ggrepel::geom_label_repel(data = clone_cluster_center,aes(label = cluster),size = 8)+ theme_bw()+ theme(axis.text = element_blank(),          axis.ticks = element_blank(),       panel.grid.major = element_blank(),       panel.grid.minor = element_blank())+ guides(fill = guide_legend(override.aes = list(size=5)))+ guides(fill = \"none\")+ theme(legend.position = \"bottom\")+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\") clone_leiden_umap clone_leiden_dm <- diffusionMap::diffuse(clone_dis,maxdim = 30) ## Performing eigendecomposition ## Computing Diffusion Coordinates ## Used default value: 11 dimensions ## Elapsed time: 2.063 seconds clone_leiden_dm_coord = as.data.frame(clone_leiden_dm$X) colnames(clone_leiden_dm_coord) = paste(\"dm\",1:ncol(clone_leiden_dm_coord),sep = \"\") rownames(clone_leiden_dm_coord) = rownames(clone_cluster) dm_cluster_center = clone_leiden_dm_coord %>% group_by(clone_cluster$cluster) %>% summarise_all(median) colnames(dm_cluster_center)[1] = \"cluster\" clone_leiden_diffmap = ggplot(mapping = aes(x = dm1,y = dm2))+ geom_point(data = clone_leiden_dm_coord,aes(fill = clone_cluster$cluster,size = log2(clone_cluster$mass)),            pch=21,color = \"black\",alpha = 0.75)+ ggrepel::geom_label_repel(data = dm_cluster_center,aes(label = cluster),size = 8)+ theme_bw()+ theme(axis.text = element_blank(),    # Remove axis numbers (labels)       axis.ticks = element_blank(),       panel.grid.major = element_blank(),       panel.grid.minor = element_blank())+ guides(fill = \"none\",size = guide_legend(title = \"log2(mass)\"))+ theme(legend.position = \"bottom\")+ xlab(\"dm 1\")+ylab(\"dm 2\") clone_leiden_diffmap clone_cluster = clone_cluster %>% mutate(clone = rownames(clone_cluster)) %>%                                    mutate(lineage = substr(clone,start = 1,stop = nchar(clone)-2),                                   time = substr(clone,start = nchar(clone),stop = nchar(clone))) %>%                                    mutate(time = paste(\"day\",time,sep = \"\")) clone_link = long2wide(clone_cluster %>% dplyr::select(lineage,time,clone),                        row_names_from = \"lineage\",                        col_names_from = \"time\",                        values_from = \"clone\",                        symmetric = FALSE) clone_link = na.omit(clone_link) colnames(clone_link) = c(\"start\",\"end\") clone_link_coord = cbind(clone_link,                          clone_leiden_dm_coord[clone_link$start,c(\"dm1\",\"dm2\")],                          clone_leiden_dm_coord[clone_link$end,c(\"dm1\",\"dm2\")],                          clone_cluster[clone_link$start,\"cluster\"],                          clone_cluster[clone_link$end,\"cluster\"]) colnames(clone_link_coord) = c(\"start\",\"end\",\"xdm1\",\"xdm2\",\"ydm1\",\"ydm2\",\"x_cluster\",\"y_cluster\") sub_annot = clone_cluster %>% filter(lineage %in% rownames(clone_link_coord)) sub_dm_coord = clone_leiden_dm_coord[rownames(sub_annot),] clone_leiden_diffmap_arrow = ggplot()+ geom_point(data = clone_leiden_dm_coord,aes(x = dm1,y = dm2),size = 0.2,color = \"lightgrey\")+ geom_point(data = sub_dm_coord,aes(x = dm1,y = dm2,fill = sub_annot$time,size = log2(sub_annot$mass)),shape = 21)+ geom_segment(data = clone_link_coord,aes(x = xdm1,y = xdm2,xend = ydm1,yend = ydm2),              arrow = arrow(length = unit(0.03, \"npc\")),linewidth = 0.25,alpha = 0.75)+ scale_fill_viridis_d(name = \"time\")+ theme_bw()+ theme(axis.text = element_blank(),    # Remove axis numbers (labels)       axis.ticks = element_blank(),       panel.grid.major = element_blank(),       panel.grid.minor = element_blank())+ guides(fill = guide_legend(override.aes = list(size=5)),        size = guide_legend(title = \"log2(mass)\")) clone_leiden_diffmap_arrow"},{"path":"/articles/Clonotrace.html","id":"profile-projection-in-cell-embedding","dir":"Articles","previous_headings":"","what":"profile projection in cell embedding","title":"An R Markdown document converted from ","text":"cluster clones profiles, cell clone probabilty, can also map cells profiles: cells profile probability higher 0.5, assign profile label: can visualize profile flow cell embedding:  Obvisouly, profile 5 6 monopotently differentiate monocytes profile 3 7 monopotently differentiate netriphil, profile 1 4 denote bipotent differenitation.","code":"clone_profile = clone_cluster %>% dplyr::select(clone,cluster) %>% mutate(flag = 1) clone_profile = long2sparse(long = clone_profile,row_names_from = \"clone\",col_names_from = \"cluster\",values_from = \"flag\") cell_profile_prob = cell_clone_prob %*% clone_profile[colnames(cell_clone_prob),] rownames(cell_profile_prob) = rownames(cell_clone_prob) cell_meta$profile = NA cell_meta[rownames(cell_profile_prob),]$profile = apply(cell_profile_prob,1,function(x){     if(max(x) > 0.5){         return(which(x == max(x))[1])     }     else{         return(NA)     } }) cell_meta = cell_meta %>% mutate(profile = as.factor(profile)) cell_meta$profile_prob = NA cell_meta[rownames(cell_profile_prob),]$profile_prob = apply(cell_profile_prob,1,max) cell_profile_umap = dimplot(embedding = umap,annot = cell_meta,color_by = \"profile\",                             size = 0.1,alpha_by = \"profile_prob\",label = TRUE)+ theme(axis.text = element_blank(),        axis.ticks = element_blank())+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\")+ guides(alpha = \"none\",color = guide_legend(override.aes = list(size=5))) cell_profile_umap"},{"path":"/articles/Clonotrace.html","id":"clone-level-pseudotime","dir":"Articles","previous_headings":"","what":"Clone level pseudotime","title":"An R Markdown document converted from ","text":"first generate clone level pseudotime diffusion pseudotime clone embedding. use clone distance projection MDS space clone embedding. step kind slow, also read pre-computed MDS embedding downstream analysis: choose cell cluster 0 starting cluster diffusion pseudotime. clone_dpt function automatically choose clone highest enrichment starting cluster root diffusion pseudotime. can visualize clone level pseudotime diffusion map:  can smooth clone level pseudotime cell embedding multiplying clone pseudotime cell clone probability. pseudotime inference necessary fate driving gene detection downstream analysis.","code":"clone_mds = MASS::isoMDS(as.matrix(clone_dis), k=30) ## initial  value 6.673968  ## iter   5 value 3.757695 ## iter  10 value 2.922664 ## iter  15 value 2.544110 ## iter  20 value 2.367482 ## iter  25 value 2.291132 ## iter  30 value 2.251516 ## iter  35 value 2.225022 ## iter  40 value 2.207040 ## final  value 2.194391  ## converged clone_embedding = clone_mds$points colnames(clone_embedding) = paste(\"mds\",1:ncol(clone_embedding),sep = \"_\") rownames(clone_embedding) = rownames(clone_cluster) file_path <- system.file(\"extdata\", \"clone_mds.tsv\", package = \"Clonotrace\") clone_embedding = read.table(file_path,sep = \"\\t\",header = TRUE) clone_t = clone_dpt(clone_embedding = clone_embedding,cell_meta = cell_meta,                     clone_col = \"clone\",cluster_col = \"cluster\",start_cluster = \"0\") clone_cluster$dpt = clone_t clone_dpt_diffmap = ggplot(mapping = aes(x = dm1,y = dm2))+ geom_point(data = clone_leiden_dm_coord,aes(fill = clone_cluster$dpt,size = log2(clone_cluster$mass)),            pch=21,color = \"black\",alpha = 0.75)+ theme_bw()+ theme(axis.text = element_blank(),    # Remove axis numbers (labels)       axis.ticks = element_blank(),       panel.grid.major = element_blank(),       panel.grid.minor = element_blank())+ guides(fill = guide_legend(override.aes = list(size=5)))+ scale_fill_viridis_c(name = \"clone t\")+ guides(size = \"none\")+ theme(legend.position = \"bottom\")+ xlab(\"dm 1\")+ylab(\"dm 2\") clone_dpt_diffmap cell_meta$cell_t = NA cell_meta[rownames(cell_clone_prob),]$cell_t = cell_clone_prob[,clone_cluster$clone] %*% clone_cluster$dpt cell_dpt_umap = dimplot(embedding = umap,annot = cell_meta,color_by = \"cell_t\",                             size = 0.1,alpha_by = NULL,label = FALSE)+ theme(axis.text = element_blank(),        axis.ticks = element_blank())+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\")+ scale_color_viridis_c(name = \"cell t\") cell_dpt_umap"},{"path":"/articles/Clonotrace.html","id":"clone-weighted-cell-embedding-optional","dir":"Articles","previous_headings":"","what":"clone weighted cell embedding (optional)","title":"An R Markdown document converted from ","text":"integrating information clone embedding cell embedding, developed new visualization method called clone-weighted cell embedding. representation, even two cells close transcriptomic (cell) embedding, pulled apart clone-weighted embedding corresponding clones distant clone space. embedding can better illustrate clone level heterogeneity. function cell_clone_coembed return sparse distance matrix, denotes weighted kNN network cells. can project kNN network UMAP visulization. step requires python script.  Obviously, appear two boundaries within two branchs monocytes (cluster 4, 3, 5) neutriphils (cluster 1, 6, 7), denote clone level heterogenity. colored cells profile identity, can see two boundaries seperate bipoent unipotent profiles.","code":"cell_k = 30 clone_k = 15 cell_embedding = pca[rownames(cell_clone_prob),] plan(multisession, workers = 8) coembed_dis = cell_clone_coembed(cell_embedding,clone_embedding) # set you python path library(reticulate) ## Warning: package 'reticulate' was built under R version 4.2.1 use_python(\"~/softwares/anaconda3/envs/py3.8/bin/python\") script_path <- system.file(\"py\", \"embedding_from_kNN.py\", package = \"Clonotrace\") source_python(script_path) source_python(script_path) cell_coembed_umap = umap_from_knn(coembed_dis,n_neighbors = 10,seed = 512) coembed_umap_cluster = dimplot(embedding = cell_coembed_umap,annot = cell_meta,alpha_by = NULL,label_size = 8,                           color_by = \"cluster\",size = 0.1,alpha = 1)+ theme(axis.text = element_blank(),    # Remove axis numbers (labels)       axis.ticks = element_blank())+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\")+ NoLegend() coembed_umap_cluster coembed_umap_profile = dimplot(embedding = cell_coembed_umap,annot = cell_meta,alpha_by = NULL,label_size = 8,                           color_by = \"profile\",size = 0.1,alpha = 1)+ theme(axis.text = element_blank(),    # Remove axis numbers (labels)       axis.ticks = element_blank())+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\")+ NoLegend() coembed_umap_profile"},{"path":"/articles/Clonotrace.html","id":"profile-enrichment-in-each-cluster","dir":"Articles","previous_headings":"","what":"profile enrichment in each cluster","title":"An R Markdown document converted from ","text":"dowsntream analysis focus early bipotent profiles (profile) detect early fate-associated genes. achieve goal first enrichment test profiles clusters show cluster profile 1 significant high density. within target cluster, compare gene expression profile 1 profiles identify early fate-associated genes. first cell cluster profile enrichment using permutation test: can visualize enrichment result using heatmap:  heatmap can see target profile 1 enriched 4 cell clusters, including 1, 3, 4 8, within cluster 1 4 early differentiation stage. , example, identify genes differentially expressed profile 1 cluter 4.","code":"enrich = cluster_profile_enrich(cell_profile_prob,cell_meta[rownames(cell_profile_prob),\"cluster\"],permute_n  = 1000) mass_long = wide2long(enrich[[1]]) mass_long = mass_long %>% mutate(i = rownames(enrich[[1]])[i],                                  j = colnames(enrich[[1]])[j]) colnames(mass_long) = c(\"cluster\",\"profile\",\"mass\") mass_long = mass_long %>% group_by(cluster) %>% mutate(freq = mass/sum(mass)) mass_long$pvalue = c(t(enrich[[2]])) mass_long$signif = \"ns\" mass_long$signif[mass_long$pvalue< 0.05] = \"*\" mass_long$signif[mass_long$pvalue< 0.01] = \"**\" mass_long$signif[mass_long$pvalue< 0.001] = \"***\" cell_type_profile_enrich_heatmap = ggplot(mass_long,aes(x = cluster,y = profile))+ geom_tile(aes(fill = freq),color = \"black\")+ scale_fill_viridis_c(option = \"turbo\")+ geom_text(data = mass_long %>% filter(signif != \"ns\"),aes(label = signif),size = 10)+ theme_classic()+ xlab(\"cell cluster\")+ ylab(\"clone profile\") cell_type_profile_enrich_heatmap"},{"path":"/articles/Clonotrace.html","id":"profile-deg-within-clusters","dir":"Articles","previous_headings":"","what":"profile DEG within clusters","title":"An R Markdown document converted from ","text":"total identified 2165 genes differentially expressed profile 1 cluster 4. can take look top 10 genes largest effect size. can take Dmkn example show linear regression model fits profile 1 profiles cluster 4 along pseudotime:  can visualize expression Dmkn cell UMAP:","code":"exprs = seurat_object@assays$RNA$data start = Sys.time() DEG_1_4 = profile_cluster_DEG(profile = \"1\",cluster = \"4\",exprs = exprs,cell_meta = cell_meta,cell_profile_prob = cell_profile_prob) end = Sys.time() print(end - start) ## Time difference of 3.211435 mins DEG_1_4_sig = DEG_1_4$stat %>% filter(padj < 0.05) nrow(DEG_1_4_sig) ## [1] 2209 DEG_1_4_sig %>% top_n(abs(cohen),n = 10) ##            stat          pval mean_diff      cohen pcali padj ## Dmkn   402.8053 1.964458e-157  2.852543  1.2481938     0    0 ## Elane  334.0937 5.498196e-133  3.274804  1.1583383     0    0 ## H2afy  293.6286 3.410286e-118 -6.640054 -1.0967736     0    0 ## Lcn2   372.0014 1.416317e-146  1.686368  1.0552461     0    0 ## Ly6a   286.7642 1.181382e-115 -2.774436 -1.0669486     0    0 ## Mpo    225.6353  1.228477e-92  1.283180  0.9665669     0    0 ## Olfm1  254.4594 1.396541e-103 -1.220302 -0.9769773     0    0 ## Prtn3  263.7946 4.321899e-107  2.336053  1.0213135     0    0 ## S100a8 336.7555 5.993067e-134  9.997585  0.9618319     0    0 ## Wfdc21 596.7888 2.620715e-222  2.947664  1.3916409     0    0 test_object = DEG_1_4 null_fit = test_object$design_null %*% test_object$coef[3:4,] full_fit = test_object$design_null %*% test_object$coef[1:2,] rownames(null_fit) = rownames(full_fit) = test_object$cell example_gene = \"Dmkn\" cell_meta$exprs = exprs[example_gene,rownames(cell_meta)] cell_meta$null_exprs = NA cell_meta[test_object$cell,]$null_exprs = null_fit[,example_gene] cell_meta$full_exprs = NA cell_meta[test_object$cell,]$full_exprs = full_fit[,example_gene] gene_fit_cluster = ggplot(cell_meta[test_object$cell,])+         geom_point(aes(x = cell_t,y = exprs,fill = cell_profile_prob[test_object$cell,\"1\"]),size = 2,shape = 21,color = \"black\")+         geom_line(aes(x = cell_t,y = null_exprs),color = \"steelblue\",linewidth = 1.5)+         geom_line(aes(x = cell_t,y = full_exprs),color = \"coral\",linewidth = 1.5)+         scale_fill_gradient2(name = \"profile 1\",low = \"steelblue\",mid = \"whitesmoke\",high = \"coral\",midpoint = 0.5,limit = c(0,1))+         theme_classic()+         xlab(\"pseudotime\")+ylab(paste(example_gene,\"exprs\",sep = \" \")) gene_fit_cluster feature_scatter = dimplot(embedding = umap,annot = t(exprs),color_by = example_gene,label  = FALSE,size = 0.1)+ scale_color_viridis_c(name = \"\",option = \"plasma\")+ theme(axis.text = element_blank(),    # Remove axis numbers (labels)       axis.ticks = element_blank(),       plot.title = element_text(hjust = 0.5),       legend.position = \"right\")+ ggtitle(example_gene)+ xlab(\"UMAP 1\")+ylab(\"UMAP 2\") feature_scatter"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yuntian Fu. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu Y (2025). Clonotrace: Deciphering T Cell Fate Clonal Dynamics via Integrative Single-Cell Lineage Modeling. R package version 1.0.0.","code":"@Manual{,   title = {Clonotrace: Deciphering T Cell Fate and Clonal Dynamics via Integrative Single-Cell Lineage Modeling},   author = {Yuntian Fu},   year = {2025},   note = {R package version 1.0.0}, }"},{"path":"/index.html","id":"clonotrace","dir":"","previous_headings":"","what":"Deciphering T Cell Fate and Clonal Dynamics via Integrative Single-Cell Lineage Modeling","title":"Deciphering T Cell Fate and Clonal Dynamics via Integrative Single-Cell Lineage Modeling","text":"Clonotrace package multimodal analysis single cell RNA-seq data lineage information, including lineaged-barcoded cells immune cells. Clonotrace generates informative clone embedding show clonal dynamics, extend pseudotime inference fate driving gene detection.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deciphering T Cell Fate and Clonal Dynamics via Integrative Single-Cell Lineage Modeling","text":"easiest way get Clonotrace install Github:","code":"# install.packages(\"devtools\") devtools::install_github(\"yuntianf/Clonotrace\",dependencies=TRUE)"},{"path":"/index.html","id":"instruction","dir":"","previous_headings":"","what":"Instruction","title":"Deciphering T Cell Fate and Clonal Dynamics via Integrative Single-Cell Lineage Modeling","text":"view documetation tutorial Clonotrace, visit:","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Deciphering T Cell Fate and Clonal Dynamics via Integrative Single-Cell Lineage Modeling","text":"use Longcell published work, please cite manuscript:","code":""},{"path":"/reference/DPT_T.html","id":null,"dir":"Reference","previous_headings":"","what":"DPT_T — DPT_T","title":"DPT_T — DPT_T","text":"Compute Diffusion Pseudotime Accumulated Commute Time Matrix","code":""},{"path":"/reference/DPT_T.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DPT_T — DPT_T","text":"","code":"DPT_T(T_mat, start)"},{"path":"/reference/DPT_T.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DPT_T — DPT_T","text":"T_mat row-normalized transition matrix (symmetric stochastic). start Integer. Index root cell pseudotime computation.","code":""},{"path":"/reference/DPT_T.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DPT_T — DPT_T","text":"numeric vector diffusion pseudotime values nodes.","code":""},{"path":"/reference/DPT_T.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DPT_T — DPT_T","text":"Computes diffusion pseudotime (DPT) distances specified root node using accumulated commute time matrix.","code":""},{"path":"/reference/DPT_T.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DPT_T — DPT_T","text":"","code":"T <- matrix(runif(100), 10, 10) T <- T / rowSums(T) pt <- DPT_T(T, start = 1) #> Error in DPT_T(T, start = 1): could not find function \"DPT_T\""},{"path":"/reference/acct.html","id":null,"dir":"Reference","previous_headings":"","what":"acct — acct","title":"acct — acct","text":"Compute Accumulated Commute Time Matrix Transition Matrix","code":""},{"path":"/reference/acct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"acct — acct","text":"","code":"acct(T_mat)"},{"path":"/reference/acct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"acct — acct","text":"T_mat square transition matrix (symmetric, row-normalized).","code":""},{"path":"/reference/acct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"acct — acct","text":"matrix accumulated commute times pairs nodes.","code":""},{"path":"/reference/acct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"acct — acct","text":"Computes accumulated commute time (ACT) matrix normalized transition matrix. used basis diffusion-based distances pseudotime inference.","code":""},{"path":"/reference/acct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"acct — acct","text":"","code":"mat <- matrix(runif(100), nrow = 10) mat <- mat / rowSums(mat) act <- acct(mat) #> Error in acct(mat): could not find function \"acct\" print(dim(act)) #> Error in print(dim(act)): object 'act' not found"},{"path":"/reference/bin_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"bin_filter — bin_filter","title":"bin_filter — bin_filter","text":"Iterative Binning Filter Remove Sparse Bins","code":""},{"path":"/reference/bin_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bin_filter — bin_filter","text":"","code":"bin_filter(x, col, thresh = 10, breaks = 100)"},{"path":"/reference/bin_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bin_filter — bin_filter","text":"x data frame. col string specifying column bin filter . thresh Minimum number rows required per bin (default: 10). breaks Number breaks use `cut()` (default: 100).","code":""},{"path":"/reference/bin_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bin_filter — bin_filter","text":"filtered data frame columns `x`, excluding temporary bin column.","code":""},{"path":"/reference/bin_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bin_filter — bin_filter","text":"Filters rows data frame bin numeric column contains least `thresh` observations. Binning performed using `cut()` specified number breaks. process repeats bins meet threshold.","code":""},{"path":"/reference/bin_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bin_filter — bin_filter","text":"","code":"df <- data.frame(val = runif(1000)) df_filtered <- bin_filter(df, col = \"val\", thresh = 20) #> Error in summarise(., count = n()): ℹ In argument: `count = n()`. #> ℹ In group 1: `bin = \"(-0.000893,0.0101]\"`. #> Caused by error in `n()`: #> ! could not find function \"n\" hist(df_filtered$val) #> Error in hist(df_filtered$val): object 'df_filtered' not found"},{"path":"/reference/bin_filter_profile_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"bin_filter_profile_mass — bin_filter_profile_mass","title":"bin_filter_profile_mass — bin_filter_profile_mass","text":"Filter Cells Profile Mass within Pseudotime Bins","code":""},{"path":"/reference/bin_filter_profile_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bin_filter_profile_mass — bin_filter_profile_mass","text":"","code":"bin_filter_profile_mass(mass, time, thresh = 5, binsize = 0.005)"},{"path":"/reference/bin_filter_profile_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bin_filter_profile_mass — bin_filter_profile_mass","text":"mass numeric matrix data frame two columns: one target profile mass one control mass. time numeric vector pseudotime values (must match number rows `mass`). thresh Minimum total mass required target control groups bin retained (default: 5). binsize Width pseudotime bins used `cut()` (default: 0.005).","code":""},{"path":"/reference/bin_filter_profile_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bin_filter_profile_mass — bin_filter_profile_mass","text":"logical vector indicating rows (cells) fall retained pseudotime bins.","code":""},{"path":"/reference/bin_filter_profile_mass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bin_filter_profile_mass — bin_filter_profile_mass","text":"Applies binning strategy pseudotime retains bins target control profile mass exceed given threshold. Useful identifying regions sufficient information differential analysis.","code":""},{"path":"/reference/bin_filter_profile_mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bin_filter_profile_mass — bin_filter_profile_mass","text":"","code":"set.seed(1) mass <- cbind(target = runif(100), control = runif(100)) time <- sort(runif(100)) valid_cells <- bin_filter_profile_mass(mass, time, thresh = 3) sum(valid_cells) #> [1] 0"},{"path":"/reference/build_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"build_edges — build_edges","title":"build_edges — build_edges","text":"Build Temporal Edge Table Time-Series Data Frame","code":""},{"path":"/reference/build_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build_edges — build_edges","text":"","code":"build_edges(df, id_col, order_col, feature_cols = NULL)"},{"path":"/reference/build_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build_edges — build_edges","text":"df data frame time-ordered entries per group. id_col Column name (string) indicating group identity (e.g., cell clone ID). order_col Column name (string) indicating time order. feature_cols Optional. Vector column names use node features. `NULL`, columns except `id_col` `order_col` used.","code":""},{"path":"/reference/build_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"build_edges — build_edges","text":"data frame row represents temporal edge start/end times next-step features.","code":""},{"path":"/reference/build_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"build_edges — build_edges","text":"group defined `id_col`, constructs edges consecutive time points based `order_col`. Adds forward-shifted features (e.g., lead values) represent transitions.","code":""},{"path":"/reference/build_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"build_edges — build_edges","text":"","code":"df <- data.frame(id = c(1, 1, 2, 2), time = c(1, 2, 1, 2), val = c(5, 6, 3, 4)) edges <- build_edges(df, id_col = \"id\", order_col = \"time\") print(edges) #> # A tibble: 2 × 5 #> # Groups:   id [2] #>      id Start   End   val Next_val #>   <dbl> <dbl> <dbl> <dbl>    <dbl> #> 1     1     1     2     5        6 #> 2     2     1     2     3        4"},{"path":"/reference/ceil_digit.html","id":null,"dir":"Reference","previous_headings":"","what":"ceil_digit — ceil_digit","title":"ceil_digit — ceil_digit","text":"Round Number Specified Number Decimal Places","code":""},{"path":"/reference/ceil_digit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ceil_digit — ceil_digit","text":"","code":"ceil_digit(x, n)"},{"path":"/reference/ceil_digit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ceil_digit — ceil_digit","text":"x numeric vector round . n Integer. Number decimal places retain.","code":""},{"path":"/reference/ceil_digit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ceil_digit — ceil_digit","text":"numeric vector rounded `n` digits.","code":""},{"path":"/reference/ceil_digit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ceil_digit — ceil_digit","text":"Rounds numeric values upward nearest multiple `n` decimal places.","code":""},{"path":"/reference/ceil_digit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ceil_digit — ceil_digit","text":"","code":"ceil_digit(3.1415, 2)  # 3.15 #> [1] 3.15 ceil_digit(c(2.001, 2.009), 2)  # c(2.01, 2.01) #> [1] 2.01 2.01"},{"path":"/reference/cell_clone_coembed.html","id":null,"dir":"Reference","previous_headings":"","what":"cell_clone_coembed — cell_clone_coembed","title":"cell_clone_coembed — cell_clone_coembed","text":"Construct Cell-Cell Distance Matrix via Clone-Aware Coembedding","code":""},{"path":"/reference/cell_clone_coembed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cell_clone_coembed — cell_clone_coembed","text":"","code":"cell_clone_coembed(cell_embedding, clone_embedding, cell_k = 30, clone_k = 15)"},{"path":"/reference/cell_clone_coembed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cell_clone_coembed — cell_clone_coembed","text":"cell_embedding numeric matrix cell embeddings (rows = cells). clone_embedding numeric matrix clone embeddings (rows = clones). cell_k Integer. Number neighbors compute cell-level kNN (default: 30). clone_k Integer. Number neighbors compute clone-level kNN (default: 15).","code":""},{"path":"/reference/cell_clone_coembed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cell_clone_coembed — cell_clone_coembed","text":"symmetric sparse distance matrix (class `dgCMatrix`) encoding clone-informed cell-cell distances.","code":""},{"path":"/reference/cell_clone_coembed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cell_clone_coembed — cell_clone_coembed","text":"Integrates cell clone embeddings using clone-level proximity reweight cell-cell distances. Generates sparse distance matrix suitable downstream embedding trajectory inference.","code":""},{"path":"/reference/cell_knn_matrix_multiplication_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"cell_knn_matrix_multiplication_parallel — cell_knn_matrix_multiplication_parallel","title":"cell_knn_matrix_multiplication_parallel — cell_knn_matrix_multiplication_parallel","text":"Parallelized Matrix Multiplication kNN Edge Weighting","code":""},{"path":"/reference/cell_knn_matrix_multiplication_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cell_knn_matrix_multiplication_parallel — cell_knn_matrix_multiplication_parallel","text":"","code":"cell_knn_matrix_multiplication_parallel(   knn,   cell_feature_mat,   feature_feature_mat,   chunk_size = 5000 )"},{"path":"/reference/cell_knn_matrix_multiplication_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cell_knn_matrix_multiplication_parallel — cell_knn_matrix_multiplication_parallel","text":"knn matrix data frame kNN edges (columns: ``, `j`). cell_feature_mat numeric matrix cell--feature weights. feature_feature_mat sparse feature similarity matrix (e.g., clone--clone). chunk_size Integer. Number edges process per parallel chunk (default: 5000).","code":""},{"path":"/reference/cell_knn_matrix_multiplication_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cell_knn_matrix_multiplication_parallel — cell_knn_matrix_multiplication_parallel","text":"numeric vector computed scores, one per kNN edge.","code":""},{"path":"/reference/cell_knn_matrix_multiplication_parallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cell_knn_matrix_multiplication_parallel — cell_knn_matrix_multiplication_parallel","text":"Computes edge-level scores via parallelized matrix multiplication cell feature matrices, allowing scalable construction clone-informed kNN graphs.","code":""},{"path":"/reference/cell_knn_matrix_mutiplication.html","id":null,"dir":"Reference","previous_headings":"","what":"cell_knn_matrix_mutiplication — cell_knn_matrix_mutiplication","title":"cell_knn_matrix_mutiplication — cell_knn_matrix_mutiplication","text":"Matrix Multiplication Cell-Feature Weighted Edges","code":""},{"path":"/reference/cell_knn_matrix_mutiplication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cell_knn_matrix_mutiplication — cell_knn_matrix_mutiplication","text":"","code":"cell_knn_matrix_mutiplication(knn, cell_feature_mat, feature_feature_mat)"},{"path":"/reference/cell_knn_matrix_mutiplication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cell_knn_matrix_mutiplication — cell_knn_matrix_mutiplication","text":"knn matrix data frame two columns: `` (source cell) `j` (neighbor cell). cell_feature_mat numeric matrix cell--feature values. feature_feature_mat matrix representing relationships features (e.g., clone similarity).","code":""},{"path":"/reference/cell_knn_matrix_mutiplication.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cell_knn_matrix_mutiplication — cell_knn_matrix_mutiplication","text":"numeric vector scores, one per kNN edge.","code":""},{"path":"/reference/cell_knn_matrix_mutiplication.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cell_knn_matrix_mutiplication — cell_knn_matrix_mutiplication","text":"Computes score kNN edge using dot product cell’s features transformed clone matrix. Used integrate clone--clone cell--clone relationships edge-level scores.","code":""},{"path":"/reference/clone_2_ot.html","id":null,"dir":"Reference","previous_headings":"","what":"clone_2_ot — clone_2_ot","title":"clone_2_ot — clone_2_ot","text":"Compute Optimal Transport Distance Two Clones","code":""},{"path":"/reference/clone_2_ot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clone_2_ot — clone_2_ot","text":"","code":"clone_2_ot(distance, group1_mass, group2_mass)"},{"path":"/reference/clone_2_ot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clone_2_ot — clone_2_ot","text":"distance numeric cost matrix pairwise distances (rows = group 1 cells, cols = group 2 cells). group1_mass numeric vector mass/probabilities group 1 (length must equal number rows `distance`). group2_mass numeric vector mass/probabilities group 2 (length must equal number columns `distance`).","code":""},{"path":"/reference/clone_2_ot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clone_2_ot — clone_2_ot","text":"single numeric value representing OT distance two groups.","code":""},{"path":"/reference/clone_2_ot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"clone_2_ot — clone_2_ot","text":"Calculates optimal transport (OT) distance two sets cells (e.g., clones) based cost matrix mass distributions. Uses `transport` package solving OT plan.","code":""},{"path":"/reference/clone_disance.html","id":null,"dir":"Reference","previous_headings":"","what":"clone_disance — clone_disance","title":"clone_disance — clone_disance","text":"Compute Clone--Clone Distances Cell Embedding Clone Assignments","code":""},{"path":"/reference/clone_disance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clone_disance — clone_disance","text":"","code":"clone_disance(   embedding,   cell_clone_prob,   outpath,   graph_k = 10,   overwrite = FALSE,   exact = FALSE,   ... )"},{"path":"/reference/clone_disance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clone_disance — clone_disance","text":"embedding numeric matrix cell embeddings (cells × dimensions). cell_clone_prob numeric matrix clone membership probabilities (cells × clones). outpath File path save load intermediate graph distance results. graph_k Integer. Number neighbors use SNN graph (default: 10). overwrite Logical. Whether overwrite previously saved graphs results (default: FALSE). exact Logical. `TRUE`, computes exact OT-based clone distances; otherwise, uses approximate NN (default: FALSE). ... Additional arguments passed `graph_clone_ot()` `graph_clone_nn()`.","code":""},{"path":"/reference/clone_disance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clone_disance — clone_disance","text":"data frame columns `group1`, `group2`, `dis`, representing pairwise clone distances.","code":""},{"path":"/reference/clone_disance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"clone_disance — clone_disance","text":"Constructs cell-cell shared nearest neighbor (SNN) graph embedding uses estimate pairwise distances clones. Users can choose exact OT-based distances fast approximate k-nearest neighbor methods.","code":""},{"path":"/reference/clone_dpt.html","id":null,"dir":"Reference","previous_headings":"","what":"clone_root — clone_dpt","title":"clone_root — clone_dpt","text":"Compute Clone-Level Diffusion Pseudotime","code":""},{"path":"/reference/clone_dpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clone_root — clone_dpt","text":"","code":"clone_dpt(   clone_embedding,   cell_meta,   clone_col,   cluster_col,   start_cluster,   k = 10,   dpt_k = 30 )"},{"path":"/reference/clone_dpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clone_root — clone_dpt","text":"clone_embedding numeric matrix rows clones columns features. cell_meta data frame metadata clone cluster annotations. clone_col Name column containing clone identifiers. cluster_col Name column containing cluster labels. start_cluster cluster label used select root clone. k Integer. Number neighbors kNN graph construction (default: 10). dpt_k Integer. Number eigenvectors DPT (default: 30).","code":""},{"path":"/reference/clone_dpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clone_root — clone_dpt","text":"numeric vector clone-level pseudotime values.","code":""},{"path":"/reference/clone_dpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"clone_root — clone_dpt","text":"Estimates pseudotime clone embedding building kNN graph applying diffusion pseudotime root clone.","code":""},{"path":"/reference/clone_dpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"clone_root — clone_dpt","text":"","code":"clone_pt <- clone_dpt(clone_embedding, cell_meta, \"clone\", \"cluster\", \"Naive\") #> Error in dbscan::kNN(x = x, k = k): object 'clone_embedding' not found hist(clone_pt) #> Error in hist(clone_pt): object 'clone_pt' not found"},{"path":"/reference/clone_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"clone_partition — clone_partition","title":"clone_partition — clone_partition","text":"Partition Clones Based Containment Similarity Centers Farthest Point Sampling","code":""},{"path":"/reference/clone_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clone_partition — clone_partition","text":"","code":"clone_partition(clone_matrix, k = 10, similarity_threshold = 0)"},{"path":"/reference/clone_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clone_partition — clone_partition","text":"clone_matrix cells × clones matrix, non-zero entries indicate clone membership. k Integer. Number clone partitions (default: 10). similarity_threshold Numeric threshold assigning clone group based similarity (default: 0).","code":""},{"path":"/reference/clone_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clone_partition — clone_partition","text":"named list clone ID vectors, one per partition.","code":""},{"path":"/reference/clone_partition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"clone_partition — clone_partition","text":"Groups clones `k` roughly balanced partitions based containment similarity. Useful parallelizing clone-level computations (e.g., OT) minimizing inter-group redundancy.","code":""},{"path":"/reference/clone_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"clone_partition — clone_partition","text":"","code":"mat <- matrix(sample(0:1, 100, replace = TRUE), nrow = 10) colnames(mat) <- paste0(\"Clone\", 1:10) partitions <- clone_partition(mat, k = 3) #> Error in clone_partition(mat, k = 3): could not find function \"clone_partition\" str(partitions) #> Error in str(partitions): object 'partitions' not found"},{"path":"/reference/clone_root.html","id":null,"dir":"Reference","previous_headings":"","what":"clone_root — clone_root","title":"clone_root — clone_root","text":"Identify Root Clone Cluster Enrichment","code":""},{"path":"/reference/clone_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clone_root — clone_root","text":"","code":"clone_root(clones, cell_meta, clone_col, cluster_col, start_cluster)"},{"path":"/reference/clone_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clone_root — clone_root","text":"clones character vector clone identifiers. cell_meta data frame clone cluster information per cell. clone_col Name column containing clone labels. cluster_col Name column containing cluster labels. start_cluster Name value cluster define root state.","code":""},{"path":"/reference/clone_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clone_root — clone_root","text":"name enriched clone start cluster.","code":""},{"path":"/reference/clone_root.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"clone_root — clone_root","text":"Finds enriched clone given starting cluster, use pseudotime root.","code":""},{"path":"/reference/clone_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"clone_root — clone_root","text":"","code":"root_clone <- clone_root(clones = c(\"A\", \"B\", \"C\"),                          cell_meta = cell_metadata,                          clone_col = \"clone_id\",                          cluster_col = \"cluster\",                          start_cluster = \"Naive\") #> Error in clone_root(clones = c(\"A\", \"B\", \"C\"), cell_meta = cell_metadata,     clone_col = \"clone_id\", cluster_col = \"cluster\", start_cluster = \"Naive\"): could not find function \"clone_root\""},{"path":"/reference/cluster_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"cluster_merge — cluster_merge","title":"cluster_merge — cluster_merge","text":"Merge Elements List According Cluster Assignments","code":""},{"path":"/reference/cluster_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cluster_merge — cluster_merge","text":"","code":"cluster_merge(input_list, cluster)"},{"path":"/reference/cluster_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cluster_merge — cluster_merge","text":"input_list list vectors objects grouped. cluster vector cluster labels length `input_list`.","code":""},{"path":"/reference/cluster_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cluster_merge — cluster_merge","text":"list element contains merged values cluster.","code":""},{"path":"/reference/cluster_merge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cluster_merge — cluster_merge","text":"Given list vector cluster assignments, merges list elements belong cluster grouped lists.","code":""},{"path":"/reference/cluster_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cluster_merge — cluster_merge","text":"","code":"lst <- list(1:2, 3:4, 5, 6) clust <- c(1, 1, 2, 2) merged <- cluster_merge(lst, clust) print(merged) #> [[1]] #> [1] 1 2 3 4 #>  #> [[2]] #> [1] 5 6 #>"},{"path":"/reference/cluster_profile_enrich.html","id":null,"dir":"Reference","previous_headings":"","what":"cluster_profile_enrich — cluster_profile_enrich","title":"cluster_profile_enrich — cluster_profile_enrich","text":"Permutation-Based Enrichment Test Profiles Within Clusters","code":""},{"path":"/reference/cluster_profile_enrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cluster_profile_enrich — cluster_profile_enrich","text":"","code":"cluster_profile_enrich(cell_profile_prob, cluster_label, permute_n = 300)"},{"path":"/reference/cluster_profile_enrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cluster_profile_enrich — cluster_profile_enrich","text":"cell_profile_prob matrix profile probabilities (cells × profiles). cluster_label vector cluster identities (length = number rows `cell_profile_prob`). permute_n Integer. Number permutations perform (default: 300).","code":""},{"path":"/reference/cluster_profile_enrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cluster_profile_enrich — cluster_profile_enrich","text":"list two elements: prob Observed profile mass per cluster (format `cluster_profile_mass()`)  pval Matrix empirical p-values (1-sided) indicating profile enrichment","code":""},{"path":"/reference/cluster_profile_enrich.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cluster_profile_enrich — cluster_profile_enrich","text":"Tests whether specific profiles statistically enriched transcriptional clusters using permutation testing. Compares observed profile mass per cluster null distribution generated random label permutations.","code":""},{"path":"/reference/cluster_profile_enrich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cluster_profile_enrich — cluster_profile_enrich","text":"","code":"set.seed(42) profile_probs <- matrix(runif(200), nrow = 50, ncol = 4) profile_probs <- profile_probs / rowSums(profile_probs) clusters <- sample(1:5, 50, replace = TRUE) result <- cluster_profile_enrich(profile_probs, clusters, permute_n = 100) head(result$pval) #>     V1   V2   V3   V4 #> 1 0.39 0.22 0.95 0.26 #> 2 0.51 0.53 0.06 0.92 #> 3 0.47 0.08 0.60 0.69 #> 4 0.82 0.45 0.14 0.58 #> 5 0.23 0.98 0.72 0.04"},{"path":"/reference/cluster_profile_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"soft_cluster_gam_fit — cluster_profile_mass","title":"soft_cluster_gam_fit — cluster_profile_mass","text":"Aggregate Profile Probabilities Cluster","code":""},{"path":"/reference/cluster_profile_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"soft_cluster_gam_fit — cluster_profile_mass","text":"","code":"cluster_profile_mass(cell_profile_prob, cluster_label)"},{"path":"/reference/cluster_profile_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"soft_cluster_gam_fit — cluster_profile_mass","text":"cell_profile_prob numeric matrix profile probabilities (cells × profiles). cluster_label vector cluster identities (length must match number rows `cell_profile_prob`).","code":""},{"path":"/reference/cluster_profile_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"soft_cluster_gam_fit — cluster_profile_mass","text":"numeric matrix rows represent clusters columns represent profile sums.","code":""},{"path":"/reference/cluster_profile_mass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"soft_cluster_gam_fit — cluster_profile_mass","text":"Computes total probability mass profile across set clusters. Typically used summarize soft profile assignments (e.g., Clonotrace) across transcriptional clusters.","code":""},{"path":"/reference/cluster_profile_mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"soft_cluster_gam_fit — cluster_profile_mass","text":"","code":"set.seed(1) prob <- matrix(runif(500), nrow = 100, ncol = 5) prob <- prob / rowSums(prob) cluster <- sample(letters[1:4], 100, replace = TRUE) profile_mass <- cluster_profile_mass(prob, cluster) #> Error in cluster_profile_mass(prob, cluster): could not find function \"cluster_profile_mass\" print(profile_mass) #> Error in print(profile_mass): object 'profile_mass' not found"},{"path":"/reference/combn_dedup.html","id":null,"dir":"Reference","previous_headings":"","what":"combn_dedup — combn_dedup","title":"combn_dedup — combn_dedup","text":"Remove Duplicate Combinations (Order-Invariant)","code":""},{"path":"/reference/combn_dedup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combn_dedup — combn_dedup","text":"","code":"combn_dedup(combn)"},{"path":"/reference/combn_dedup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combn_dedup — combn_dedup","text":"combn two-column matrix row pairwise combination.","code":""},{"path":"/reference/combn_dedup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combn_dedup — combn_dedup","text":"logical vector indicating whether row unique (order-insensitive) combination.","code":""},{"path":"/reference/combn_dedup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"combn_dedup — combn_dedup","text":"Given matrix combinations (e.g., `combn()`), function removes duplicates row elements identical ordering.","code":""},{"path":"/reference/combn_dedup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"combn_dedup — combn_dedup","text":"","code":"combn_mat <- matrix(c(1,2,2,1,3,4), ncol = 2, byrow = TRUE) unique_flags <- combn_dedup(combn_mat) print(unique_flags) #> [1]  TRUE FALSE  TRUE"},{"path":"/reference/compute_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"compute_transition — compute_transition","title":"compute_transition — compute_transition","text":"Compute Normalized Transition Matrix Connectivity Matrix","code":""},{"path":"/reference/compute_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute_transition — compute_transition","text":"","code":"compute_transition(connectivity)"},{"path":"/reference/compute_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute_transition — compute_transition","text":"connectivity symmetric numeric sparse matrix representing pairwise affinities (e.g., k-NN graph).","code":""},{"path":"/reference/compute_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute_transition — compute_transition","text":"symmetric matrix representing normalized transition matrix.","code":""},{"path":"/reference/compute_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"compute_transition — compute_transition","text":"Converts symmetric connectivity matrix double-normalized transition matrix suitable diffusion-based analyses. output matrix scaled preserves local affinities symmetric unit row column scaling. transition matrix computed : $$T = Z D^{-1} D^{-1} Z$$ \\(\\) input matrix, \\(D\\) row sum diagonal matrix, \\(Z\\) rescales result symmetry.","code":""},{"path":"/reference/compute_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute_transition — compute_transition","text":"","code":"library(Matrix) mat <- Matrix::rsparsematrix(5, 5, density = 0.6) mat <- 0.5 * (mat + t(mat))  # ensure symmetry trans <- compute_transition(mat) #> Warning: NaNs produced print(trans) #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                                             #> [1,] .          0.02096412 NaN .        NaN #> [2,] 0.02096412 0.18876807 NaN .        NaN #> [3,]        NaN        NaN NaN      NaN NaN #> [4,] .          .          NaN 1.025801 NaN #> [5,]        NaN        NaN NaN      NaN   ."},{"path":"/reference/connectivity_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"connectivity_coord — connectivity_coord","title":"connectivity_coord — connectivity_coord","text":"Convert Connectivity Matrix Edge Coordinates Plotting","code":""},{"path":"/reference/connectivity_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connectivity_coord — connectivity_coord","text":"","code":"connectivity_coord(coord, connectivity, dims = c(1, 2))"},{"path":"/reference/connectivity_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connectivity_coord — connectivity_coord","text":"coord numeric matrix data frame coordinates (rows = points, columns = dimensions). connectivity square numeric sparse matrix representing connectivity points. dims numeric vector length 2 specifying columns `coord` use x y coordinates.","code":""},{"path":"/reference/connectivity_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"connectivity_coord — connectivity_coord","text":"data frame one row per edge","code":""},{"path":"/reference/connectivity_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"connectivity_coord — connectivity_coord","text":"Transforms connectivity matrix coordinate matrix data frame containing edge coordinates. useful plotting graph-like structures (e.g., k-NN graphs SNNs) using `ggplot2::geom_segment`.","code":""},{"path":"/reference/dimplot.html","id":null,"dir":"Reference","previous_headings":"","what":"dimplot — dimplot","title":"dimplot — dimplot","text":"Plot 2D Embedding Annotations, Connectivity Edges, Optional Labels","code":""},{"path":"/reference/dimplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dimplot — dimplot","text":"","code":"dimplot(   embedding,   annot,   color_by,   alpha_by = NULL,   connectivity = NULL,   label = TRUE,   dims = c(1, 2),   connectivity_thresh = 0.1,   label_size = 5,   label_type = \"text\",   label_color = \"black\",   box.padding = 0.25,   point.padding = 1e-06,   raster_thresh = 10000,   ... )"},{"path":"/reference/dimplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dimplot — dimplot","text":"embedding numeric matrix data frame embeddings (rows = cells, columns = dimensions). annot data frame annotations rownames matching `embedding`. color_by name column `annot` used color points. alpha_by Optional. name column `annot` used set point transparency. connectivity Optional. square matrix indicating connectivity groups (e.g., clusters). label Logical. Whether add text label annotations group centers. dims Integer vector length 2 specifying dimensions plot (default: c(1, 2)). connectivity_thresh Threshold filtering weak edges connectivity matrix (default: 0.1). label_size Numeric. Size label text (default: 5). label_type Character. One `\"text\"` `\"label\"`, determines type label used (default: \"text\"). label_color Color used label text (default: \"black\"). box.padding Padding around label boxes (default: 0.25). point.padding Padding labels points (default: 1e-6). raster_thresh Integer. Threshold rasterization applied speed rendering (default: 10000). ... Additional arguments passed `geom_point()` main data points.","code":""},{"path":"/reference/dimplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dimplot — dimplot","text":"`ggplot` object displaying embedding color optional annotations, connectivity, labels.","code":""},{"path":"/reference/dimplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dimplot — dimplot","text":"function generates 2D scatter plot given embedding (e.g., UMAP PCA) points colored annotation, optionally alpha-scaled, labeled, overlaid edges based connectivity matrix. designed use single-cell embedding-based visualizations optional rasterization support large datasets.","code":""},{"path":"/reference/dimplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dimplot — dimplot","text":"","code":"if (FALSE) { # Example with dummy UMAP and cluster annotation umap <- matrix(rnorm(200), ncol = 2) rownames(umap) <- paste0(\"Cell\", 1:100) annot <- data.frame(cluster = sample(letters[1:4], 100, TRUE)) rownames(annot) <- rownames(umap) dimplot(umap, annot, color_by = \"cluster\") }"},{"path":"/reference/dis2connec_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"dis2connec_sparse — dis2connec_sparse","title":"dis2connec_sparse — dis2connec_sparse","text":"Convert Sparse Distance Matrix Sparse Connectivity Matrix","code":""},{"path":"/reference/dis2connec_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dis2connec_sparse — dis2connec_sparse","text":"","code":"dis2connec_sparse(D)"},{"path":"/reference/dis2connec_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dis2connec_sparse — dis2connec_sparse","text":"D symmetric sparse distance matrix (class `dgCMatrix`).","code":""},{"path":"/reference/dis2connec_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dis2connec_sparse — dis2connec_sparse","text":"sparse matrix connectivities (class `dgCMatrix`) weights represent local affinities.","code":""},{"path":"/reference/dis2connec_sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dis2connec_sparse — dis2connec_sparse","text":"Transforms sparse distance matrix Gaussian kernel-based connectivity matrix using locally adaptive bandwidth. resulting matrix can interpreted similarity graph.","code":""},{"path":"/reference/dis2connec_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dis2connec_sparse — dis2connec_sparse","text":"","code":"library(Matrix) D <- rsparsematrix(100, 100, density = 0.05) D <- 0.5 * (D + t(D))  # ensure symmetry C <- dis2connec_sparse(D) print(C[1:5, 1:5]) #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>             1            2 3 4 5 #> 1 .           1.981971e-03 . . . #> 2 0.001981971 1.374195e-23 . . . #> 3 .           .            . . . #> 4 .           .            . . . #> 5 .           .            . . ."},{"path":"/reference/dis_point_to_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"dis_point_to_edge — dis_point_to_edge","title":"dis_point_to_edge — dis_point_to_edge","text":"Compute Distance Point Line Segment","code":""},{"path":"/reference/dis_point_to_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dis_point_to_edge — dis_point_to_edge","text":"","code":"dis_point_to_edge(point, edge_start, edge_end)"},{"path":"/reference/dis_point_to_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dis_point_to_edge — dis_point_to_edge","text":"point numeric vector representing point. edge_start numeric vector representing start edge. edge_end numeric vector representing end edge.","code":""},{"path":"/reference/dis_point_to_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dis_point_to_edge — dis_point_to_edge","text":"numeric vector length 2: shortest distance scalar projection (t [0,1]).","code":""},{"path":"/reference/dis_point_to_edge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dis_point_to_edge — dis_point_to_edge","text":"Calculates shortest distance point line segment 2D 3D space, returns scalar projection position along segment.","code":""},{"path":"/reference/dis_point_to_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dis_point_to_edge — dis_point_to_edge","text":"","code":"d <- dis_point_to_edge(c(0, 0), c(1, 0), c(1, 1)) print(d)  # Expect ~1.0 distance to the vertical segment #> [1] 1 0"},{"path":"/reference/dis_points_to_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"dis_points_to_edges — dis_points_to_edges","title":"dis_points_to_edges — dis_points_to_edges","text":"Compute Distances Multiple Points Multiple Edges","code":""},{"path":"/reference/dis_points_to_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dis_points_to_edges — dis_points_to_edges","text":"","code":"dis_points_to_edges(points, edges)"},{"path":"/reference/dis_points_to_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dis_points_to_edges — dis_points_to_edges","text":"points data frame matrix row point (2D 3D). edges list edge definitions, element 2-row matrix: row 1 = start, row 2 = end.","code":""},{"path":"/reference/dis_points_to_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dis_points_to_edges — dis_points_to_edges","text":"list two components: map Matrix scalar projection values (t [0,1]) point–edge pair. dis Matrix shortest distances point–edge pair.","code":""},{"path":"/reference/dis_points_to_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dis_points_to_edges — dis_points_to_edges","text":"Computes distance point edge, also returns scalar projection edge understand closest point falls along segment.","code":""},{"path":"/reference/dis_points_to_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dis_points_to_edges — dis_points_to_edges","text":"","code":"pts <- data.frame(x = rnorm(3), y = rnorm(3)) edge1 <- matrix(c(0, 0, 1, 1), ncol = 2, byrow = TRUE) edge2 <- matrix(c(0, 1, 1, 0), ncol = 2, byrow = TRUE) dists <- dis_points_to_edges(pts, list(edge1, edge2)) str(dists) #> List of 2 #>  $ map: num [1:3, 1:2] 1.51 1.93 2.4 0.83 2.38 ... #>  $ dis: num [1:3, 1:2] 0.339 0 0.243 0 0 ..."},{"path":"/reference/dismat_mst.html","id":null,"dir":"Reference","previous_headings":"","what":"dismat_mst — dismat_mst","title":"dismat_mst — dismat_mst","text":"Compute Minimum Spanning Tree (MST) Distance Matrix","code":""},{"path":"/reference/dismat_mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dismat_mst — dismat_mst","text":"","code":"dismat_mst(mat)"},{"path":"/reference/dismat_mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dismat_mst — dismat_mst","text":"mat symmetric numeric distance matrix.","code":""},{"path":"/reference/dismat_mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dismat_mst — dismat_mst","text":"data frame columns ``, ``, `weight` representing MST edges.","code":""},{"path":"/reference/dismat_mst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dismat_mst — dismat_mst","text":"Converts full square distance matrix graph computes minimum spanning tree. Returns MST edges long-format data frame.","code":""},{"path":"/reference/dismat_mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dismat_mst — dismat_mst","text":"","code":"dist_mat <- as.matrix(dist(matrix(rnorm(25), ncol = 5))) mst_edges <- dismat_mst(dist_mat) #> Error in dismat_mst(dist_mat): could not find function \"dismat_mst\" print(mst_edges) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'print': object 'mst_edges' not found"},{"path":"/reference/dist2knn.html","id":null,"dir":"Reference","previous_headings":"","what":"dist2knn — dist2knn","title":"dist2knn — dist2knn","text":"Compute k-Nearest Neighbor Graph Precomputed Distances","code":""},{"path":"/reference/dist2knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist2knn — dist2knn","text":"","code":"dist2knn(embedding, k, mode = \"connectivity\", ...)"},{"path":"/reference/dist2knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist2knn — dist2knn","text":"embedding distance matrix `dist` object. k Integer. Number nearest neighbors compute. mode Character. Either `\"dist\"` `\"connectivity\"` (default: `\"connectivity\"`). ... Additional arguments passed `knn_flat()`.","code":""},{"path":"/reference/dist2knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist2knn — dist2knn","text":"sparse matrix representing k-NN graph (class `dgCMatrix`).","code":""},{"path":"/reference/dist2knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dist2knn — dist2knn","text":"Given distance matrix, constructs k-nearest neighbor graph sparse matrix. Optionally converts distances Gaussian kernel similarities.","code":""},{"path":"/reference/dist2knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dist2knn — dist2knn","text":"","code":"dmat <- dist(matrix(rnorm(100), ncol = 2)) knn_graph <- dist2knn(dmat, k = 5) #> Error in 1:nrow(embedding): argument of length 0 print(knn_graph) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'print': object 'knn_graph' not found"},{"path":"/reference/dpt.html","id":null,"dir":"Reference","previous_headings":"","what":"dpt — dpt","title":"dpt — dpt","text":"Compute Diffusion Pseudotime Transition Matrix (Eigen Decomposition)","code":""},{"path":"/reference/dpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dpt — dpt","text":"","code":"dpt(T_mat, root, k = 30)"},{"path":"/reference/dpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dpt — dpt","text":"T_mat square transition matrix (e.g., kNN graph). root Integer. Index root cell. k Integer. Number eigenvectors use (default: 30).","code":""},{"path":"/reference/dpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dpt — dpt","text":"numeric vector pseudotime values normalized [0, 1].","code":""},{"path":"/reference/dpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dpt — dpt","text":"Calculates pseudotime spectral decomposition diffusion transition matrix, using root cell reference point reduced diffusion space.","code":""},{"path":"/reference/dpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dpt — dpt","text":"","code":"T <- matrix(runif(100), 10, 10) T <- T / rowSums(T) pt <- dpt(T, root = 1) #> Error in dpt(T, root = 1): could not find function \"dpt\""},{"path":"/reference/embedding2dpt.html","id":null,"dir":"Reference","previous_headings":"","what":"embedding2dpt — embedding2dpt","title":"embedding2dpt — embedding2dpt","text":"Compute Diffusion Pseudotime Embedding","code":""},{"path":"/reference/embedding2dpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"embedding2dpt — embedding2dpt","text":"","code":"embedding2dpt(embedding, nn_k, root, dpt_k = 30)"},{"path":"/reference/embedding2dpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"embedding2dpt — embedding2dpt","text":"embedding numeric matrix embeddings (e.g., UMAP PCA). nn_k Integer. Number neighbors kNN graph. root Integer. Index root cell. dpt_k Integer. Number eigenvectors used DPT (default: 30).","code":""},{"path":"/reference/embedding2dpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"embedding2dpt — embedding2dpt","text":"numeric vector pseudotime values row `embedding`.","code":""},{"path":"/reference/embedding2dpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"embedding2dpt — embedding2dpt","text":"Builds kNN graph embedding matrix computes diffusion pseudotime starting root cell.","code":""},{"path":"/reference/embedding2dpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"embedding2dpt — embedding2dpt","text":"","code":"mat <- matrix(rnorm(200), ncol = 5) pt <- embedding2dpt(mat, nn_k = 10, root = 1)"},{"path":"/reference/embedding2knn.html","id":null,"dir":"Reference","previous_headings":"","what":"embedding2knn — embedding2knn","title":"embedding2knn — embedding2knn","text":"Compute k-Nearest Neighbor Graph Embedding","code":""},{"path":"/reference/embedding2knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"embedding2knn — embedding2knn","text":"","code":"embedding2knn(embedding, k, mode = \"connectivity\", ...)"},{"path":"/reference/embedding2knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"embedding2knn — embedding2knn","text":"embedding numeric matrix embeddings (rows = observations). k Integer. Number nearest neighbors use. mode Character. Either `\"dist\"` raw distances `\"connectivity\"` Gaussian kernel weights (default: `\"connectivity\"`). ... Additional arguments passed `knn_flat()`.","code":""},{"path":"/reference/embedding2knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"embedding2knn — embedding2knn","text":"sparse matrix representing k-NN graph (class `dgCMatrix`).","code":""},{"path":"/reference/embedding2knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"embedding2knn — embedding2knn","text":"Converts data matrix (e.g., UMAP PCA coordinates) k-nearest neighbor graph. Returns sparse matrix either pairwise distances computed connectivities.","code":""},{"path":"/reference/embedding2knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"embedding2knn — embedding2knn","text":"","code":"mat <- matrix(rnorm(100), ncol = 2) knn_mat <- embedding2knn(mat, k = 5) print(knn_mat) #> 50 x 50 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 50 column names ‘1’, ‘2’, ‘3’ ... ]] #>                                                                          #> 1  .         0.1184208 .         .         .         .         .         #> 2  0.1184208 .         .         .         .         .         .         #> 3  .         .         .         .         .         .         .         #> 4  .         .         .         .         .         0.2567637 0.3406143 #> 5  .         .         .         .         .         .         0.4762501 #> 6  .         .         .         0.2567637 .         .         .         #> 7  .         .         .         0.3406143 0.4762501 .         .         #> 8  .         .         .         .         .         .         .         #> 9  .         .         .         .         .         .         .         #> 10 .         .         .         .         .         .         .         #> 11 0.3868198 0.5310363 .         .         .         .         .         #> 12 .         .         .         .         .         .         .         #> 13 .         .         .         0.8169116 0.4407453 .         0.8472785 #> 14 .         .         .         .         .         0.2175589 .         #> 15 .         .         .         .         .         0.1854531 .         #> 16 .         .         .         .         .         .         .         #> 17 .         .         0.9953676 .         .         .         .         #> 18 .         .         .         .         .         .         .         #> 19 .         .         .         .         .         .         .         #> 20 .         .         .         .         .         .         .         #> 21 0.3988396 0.3480969 .         .         .         .         .         #> 22 .         .         .         .         .         .         .         #> 23 .         .         .         .         .         .         .         #> 24 .         .         0.2239967 .         .         .         .         #> 25 0.3074574 0.7805902 .         .         .         .         .         #> 26 .         .         .         .         0.4643857 .         0.6059912 #> 27 .         .         .         .         .         .         .         #> 28 .         .         .         .         .         .         .         #> 29 .         .         .         .         .         .         .         #> 30 .         .         .         .         .         .         .         #> 31 .         .         0.3778977 .         .         .         .         #> 32 .         .         .         .         .         .         .         #> 33 .         .         .         .         .         .         .         #> 34 .         .         .         .         .         .         .         #> 35 .         .         0.2153303 .         .         .         .         #> 36 .         .         .         .         .         .         .         #> 37 .         .         .         .         0.4087390 0.3159224 0.0754958 #> 38 .         .         .         .         0.4164495 .         0.7430310 #> 39 .         .         .         .         .         0.2932228 .         #> 40 .         .         0.6076027 .         .         .         .         #> 41 .         .         .         .         .         0.6364572 .         #> 42 .         0.9447261 .         .         .         .         .         #> 43 .         0.3135464 .         .         .         .         .         #> 44 .         .         .         0.1497586 .         .         .         #> 45 .         .         0.1973182 .         .         .         .         #> 46 0.8437874 0.1337990 .         .         .         .         .         #> 47 .         .         .         0.8109439 .         0.3991822 .         #> 48 .         .         .         .         .         .         .         #> 49 .         .         .         0.1927613 0.5486364 .         0.9222609 #> 50 .         .         0.3697452 .         .         .         .         #>                                                                           #> 1  .         .         .          0.3868198 .         .         .         #> 2  .         .         .          0.5310363 .         .         .         #> 3  .         .         .          .         .         .         .         #> 4  .         .         .          .         .         0.8169116 .         #> 5  .         .         .          .         .         0.4407453 .         #> 6  .         .         .          .         .         .         0.2175589 #> 7  .         .         .          .         .         0.8472785 .         #> 8  .         0.2427997 .          .         0.1471548 .         .         #> 9  0.2427997 .         .          .         .         .         .         #> 10 .         .         .          .         .         0.0335639 .         #> 11 .         .         .          .         .         .         .         #> 12 0.1471548 .         .          .         .         .         .         #> 13 .         .         0.03356390 .         .         .         .         #> 14 .         .         .          .         .         .         .         #> 15 .         .         .          .         .         .         0.8640470 #> 16 .         .         .          .         .         .         .         #> 17 .         .         .          .         .         .         .         #> 18 .         .         .          .         .         .         .         #> 19 0.4809467 0.1508191 .          .         .         .         .         #> 20 .         .         .          .         .         .         .         #> 21 .         .         0.08381500 .         .         .         .         #> 22 .         .         .          .         .         .         .         #> 23 0.2963451 0.4321830 .          .         .         .         .         #> 24 .         .         .          .         .         .         .         #> 25 .         .         .          0.8624831 .         .         .         #> 26 .         .         0.03355496 .         .         0.5104976 .         #> 27 .         0.5882089 .          .         .         .         .         #> 28 .         .         .          .         0.2464631 .         .         #> 29 .         .         .          .         .         .         .         #> 30 0.4133902 0.8002023 .          .         .         .         .         #> 31 .         .         .          .         .         .         .         #> 32 0.5768500 .         .          .         0.2111644 .         .         #> 33 .         .         .          .         .         .         .         #> 34 .         .         .          .         0.5551898 .         .         #> 35 .         .         .          .         .         .         .         #> 36 0.9443623 0.3721877 .          .         .         .         .         #> 37 .         .         .          .         .         0.1850369 .         #> 38 .         .         0.03174495 .         .         0.6351541 .         #> 39 .         .         .          .         .         .         0.7372965 #> 40 .         .         .          .         .         .         .         #> 41 .         .         .          .         .         .         0.6023753 #> 42 .         .         .          0.3149786 .         .         .         #> 43 .         .         .          0.3159085 0.2136777 .         .         #> 44 .         .         .          .         .         .         0.1111596 #> 45 .         .         .          .         .         .         .         #> 46 .         .         .          0.2902373 .         .         .         #> 47 .         .         0.05162390 .         .         0.5978574 .         #> 48 .         .         .          .         .         .         .         #> 49 .         .         .          .         .         0.6798080 .         #> 50 .         .         .          .         .         .         .         #>                                                                          #> 1  .         .         .         .         .         .         0.3988396 #> 2  .         .         .         .         .         .         0.3480969 #> 3  .         .         0.9953676 .         .         .         .         #> 4  .         .         .         .         .         .         .         #> 5  .         .         .         .         .         .         .         #> 6  0.1854531 .         .         .         .         .         .         #> 7  .         .         .         .         .         .         .         #> 8  .         .         .         .         0.4809467 .         .         #> 9  .         .         .         .         0.1508191 .         .         #> 10 .         .         .         .         .         .         0.0838150 #> 11 .         .         .         .         .         .         .         #> 12 .         .         .         .         .         .         .         #> 13 .         .         .         .         .         .         .         #> 14 0.8640470 .         .         .         .         .         .         #> 15 .         0.1275482 .         .         .         .         .         #> 16 0.1275482 .         .         0.5400502 .         .         .         #> 17 .         .         .         .         .         .         .         #> 18 .         0.5400502 .         .         .         .         .         #> 19 .         .         .         .         .         .         .         #> 20 .         .         .         .         .         .         .         #> 21 .         .         .         .         .         .         .         #> 22 .         .         .         0.5547196 .         .         .         #> 23 .         .         .         .         .         0.2503863 .         #> 24 .         .         0.2173238 .         .         0.9053228 .         #> 25 .         .         .         .         .         .         0.3650589 #> 26 .         .         .         .         .         .         .         #> 27 .         .         .         .         .         0.2024763 .         #> 28 .         0.5742238 .         0.3681105 .         .         .         #> 29 .         .         .         .         .         .         .         #> 30 .         .         .         .         0.1395176 0.2346526 .         #> 31 .         .         0.3174120 .         .         .         .         #> 32 .         .         .         0.3511020 0.1329241 .         .         #> 33 .         .         .         0.1887311 .         0.3641781 .         #> 34 .         0.2487339 .         .         .         .         .         #> 35 .         .         .         .         .         .         .         #> 36 .         .         .         .         0.4979924 .         .         #> 37 .         .         .         .         .         .         .         #> 38 .         .         .         .         .         .         .         #> 39 0.8792834 .         .         .         .         .         .         #> 40 .         .         0.5476483 .         .         .         .         #> 41 0.4628764 .         .         .         .         .         .         #> 42 .         .         .         .         .         .         0.3034629 #> 43 .         0.3058169 .         .         .         .         .         #> 44 0.2744359 .         .         .         .         .         .         #> 45 .         .         0.1764789 .         .         .         .         #> 46 .         .         .         .         .         .         0.6057831 #> 47 .         .         .         .         .         .         .         #> 48 .         .         .         .         .         .         .         #> 49 .         .         .         .         .         .         .         #> 50 .         .         0.3401172 .         .         0.6922838 .         #>                                                                           #> 1  .         .         .         0.3074574 .          .         .         #> 2  .         .         .         0.7805902 .          .         .         #> 3  .         .         0.2239967 .         .          .         .         #> 4  .         .         .         .         .          .         .         #> 5  .         .         .         .         0.46438573 .         .         #> 6  .         .         .         .         .          .         .         #> 7  .         .         .         .         0.60599124 .         .         #> 8  .         0.2963451 .         .         .          .         .         #> 9  .         0.4321830 .         .         .          0.5882089 .         #> 10 .         .         .         .         0.03355496 .         .         #> 11 .         .         .         0.8624831 .          .         .         #> 12 .         .         .         .         .          .         0.2464631 #> 13 .         .         .         .         0.51049758 .         .         #> 14 .         .         .         .         .          .         .         #> 15 .         .         .         .         .          .         .         #> 16 .         .         .         .         .          .         0.5742238 #> 17 .         .         0.2173238 .         .          .         .         #> 18 0.5547196 .         .         .         .          .         0.3681105 #> 19 .         .         .         .         .          .         .         #> 20 .         0.2503863 0.9053228 .         .          0.2024763 .         #> 21 .         .         .         0.3650589 .          .         .         #> 22 .         0.6478643 0.2074678 .         .          .         .         #> 23 0.6478643 .         0.2346899 .         .          0.1330021 .         #> 24 0.2074678 0.2346899 .         .         .          .         .         #> 25 .         .         .         .         .          .         .         #> 26 .         .         .         .         .          .         .         #> 27 .         0.1330021 .         .         .          .         .         #> 28 .         .         .         .         .          .         .         #> 29 .         .         .         .         .          0.1902318 .         #> 30 0.2535603 0.7990616 .         .         .          0.3017438 .         #> 31 .         .         .         .         .          .         .         #> 32 0.3158043 0.5614030 .         .         .          .         0.4060475 #> 33 0.7092609 0.4330073 0.5356486 .         .          .         .         #> 34 .         .         .         .         .          .         0.7527819 #> 35 .         .         0.1655454 .         .          .         .         #> 36 .         .         .         .         .          0.1525387 .         #> 37 .         .         .         .         .          .         .         #> 38 .         .         .         .         0.95370720 .         .         #> 39 .         .         .         .         .          .         .         #> 40 .         .         .         .         .          .         .         #> 41 .         .         .         .         .          .         .         #> 42 .         .         .         0.5621012 .          .         .         #> 43 .         .         .         0.2447889 .          .         0.3182275 #> 44 .         .         .         .         .          .         .         #> 45 .         .         .         .         .          .         .         #> 46 .         .         .         0.3128206 .          .         .         #> 47 .         .         .         .         .          .         .         #> 48 .         .         .         .         .          0.1568737 .         #> 49 .         .         .         .         0.76636704 .         .         #> 50 .         .         0.7337795 .         .          .         .         #>                                                                          #> 1  .         .         .         .         .         .         .         #> 2  .         .         .         .         .         .         .         #> 3  .         .         0.3778977 .         .         .         0.2153303 #> 4  .         .         .         .         .         .         .         #> 5  .         .         .         .         .         .         .         #> 6  .         .         .         .         .         .         .         #> 7  .         .         .         .         .         .         .         #> 8  .         0.4133902 .         0.5768500 .         .         .         #> 9  .         0.8002023 .         .         .         .         .         #> 10 .         .         .         .         .         .         .         #> 11 .         .         .         .         .         .         .         #> 12 .         .         .         0.2111644 .         0.5551898 .         #> 13 .         .         .         .         .         .         .         #> 14 .         .         .         .         .         .         .         #> 15 .         .         .         .         .         .         .         #> 16 .         .         .         .         .         0.2487339 .         #> 17 .         .         0.3174120 .         .         .         .         #> 18 .         .         .         0.3511020 0.1887311 .         .         #> 19 .         0.1395176 .         0.1329241 .         .         .         #> 20 .         0.2346526 .         .         0.3641781 .         .         #> 21 .         .         .         .         .         .         .         #> 22 .         0.2535603 .         0.3158043 0.7092609 .         .         #> 23 .         0.7990616 .         0.5614030 0.4330073 .         .         #> 24 .         .         .         .         0.5356486 .         0.1655454 #> 25 .         .         .         .         .         .         .         #> 26 .         .         .         .         .         .         .         #> 27 0.1902318 0.3017438 .         .         .         .         .         #> 28 .         .         .         0.4060475 .         0.7527819 .         #> 29 .         .         .         .         .         .         0.3439661 #> 30 .         .         .         0.3940786 .         .         .         #> 31 .         .         .         .         .         .         0.4771881 #> 32 .         0.3940786 .         .         .         0.2861055 .         #> 33 .         .         .         .         .         .         .         #> 34 .         .         .         0.2861055 .         .         .         #> 35 0.3439661 .         0.4771881 .         .         .         .         #> 36 .         0.5239135 .         0.4612485 .         .         .         #> 37 .         .         .         .         .         .         .         #> 38 .         .         .         .         .         .         .         #> 39 .         .         .         .         .         .         .         #> 40 0.1144858 .         0.8246787 .         .         .         0.7688434 #> 41 .         .         .         .         .         .         .         #> 42 .         .         .         .         .         .         .         #> 43 .         .         .         .         .         0.3971952 .         #> 44 .         .         .         .         .         .         .         #> 45 .         .         0.3192183 .         .         .         .         #> 46 .         .         .         .         .         .         .         #> 47 .         .         .         .         .         .         .         #> 48 0.9224315 .         .         .         .         .         0.2257139 #> 49 .         .         .         .         .         .         .         #> 50 0.1537840 .         .         .         .         .         0.6003765 #>                                                                             #> 1  .         .          .          .         .          .         .         #> 2  .         .          .          .         .          .         0.9447261 #> 3  .         .          .          .         0.60760272 .         .         #> 4  .         .          .          .         .          .         .         #> 5  .         0.40873902 0.41644948 .         .          .         .         #> 6  .         0.31592238 .          0.2932228 .          0.6364572 .         #> 7  .         0.07549580 0.74303102 .         .          .         .         #> 8  0.9443623 .          .          .         .          .         .         #> 9  0.3721877 .          .          .         .          .         .         #> 10 .         .          0.03174495 .         .          .         .         #> 11 .         .          .          .         .          .         0.3149786 #> 12 .         .          .          .         .          .         .         #> 13 .         0.18503691 0.63515410 .         .          .         .         #> 14 .         .          .          0.7372965 .          0.6023753 .         #> 15 .         .          .          0.8792834 .          0.4628764 .         #> 16 .         .          .          .         .          .         .         #> 17 .         .          .          .         0.54764825 .         .         #> 18 .         .          .          .         .          .         .         #> 19 0.4979924 .          .          .         .          .         .         #> 20 .         .          .          .         .          .         .         #> 21 .         .          .          .         .          .         0.3034629 #> 22 .         .          .          .         .          .         .         #> 23 .         .          .          .         .          .         .         #> 24 .         .          .          .         .          .         .         #> 25 .         .          .          .         .          .         0.5621012 #> 26 .         .          0.95370720 .         .          .         .         #> 27 0.1525387 .          .          .         .          .         .         #> 28 .         .          .          .         .          .         .         #> 29 .         .          .          .         0.11448578 .         .         #> 30 0.5239135 .          .          .         .          .         .         #> 31 .         .          .          .         0.82467867 .         .         #> 32 0.4612485 .          .          .         .          .         .         #> 33 .         .          .          .         .          .         .         #> 34 .         .          .          .         .          .         .         #> 35 .         .          .          .         0.76884340 .         .         #> 36 .         .          .          .         .          .         .         #> 37 .         .          .          .         .          .         .         #> 38 .         .          .          .         .          .         .         #> 39 .         .          .          .         .          0.6185784 .         #> 40 .         .          .          .         .          .         .         #> 41 .         .          .          0.6185784 .          .         .         #> 42 .         .          .          .         .          .         .         #> 43 .         .          .          .         .          .         0.2381148 #> 44 .         .          .          0.2884208 .          .         .         #> 45 .         0.30435584 .          .         0.22536100 .         .         #> 46 .         .          .          .         .          .         .         #> 47 .         .          .          0.2855604 .          0.1949143 .         #> 48 .         .          .          .         0.07294978 .         .         #> 49 .         0.07915158 0.84737132 .         .          .         .         #> 50 .         .          .          .         0.60937493 .         .         #>                                                                            #> 1  .         .         .         0.8437874 .         .          .          #> 2  0.3135464 .         .         0.1337990 .         .          .          #> 3  .         .         0.1973182 .         .         .          .          #> 4  .         0.1497586 .         .         0.8109439 .          0.19276130 #> 5  .         .         .         .         .         .          0.54863644 #> 6  .         .         .         .         0.3991822 .          .          #> 7  .         .         .         .         .         .          0.92226095 #> 8  .         .         .         .         .         .          .          #> 9  .         .         .         .         .         .          .          #> 10 .         .         .         .         0.0516239 .          .          #> 11 0.3159085 .         .         0.2902373 .         .          .          #> 12 0.2136777 .         .         .         .         .          .          #> 13 .         .         .         .         0.5978574 .          0.67980795 #> 14 .         0.1111596 .         .         .         .          .          #> 15 .         0.2744359 .         .         .         .          .          #> 16 0.3058169 .         .         .         .         .          .          #> 17 .         .         0.1764789 .         .         .          .          #> 18 .         .         .         .         .         .          .          #> 19 .         .         .         .         .         .          .          #> 20 .         .         .         .         .         .          .          #> 21 .         .         .         0.6057831 .         .          .          #> 22 .         .         .         .         .         .          .          #> 23 .         .         .         .         .         .          .          #> 24 .         .         .         .         .         .          .          #> 25 0.2447889 .         .         0.3128206 .         .          .          #> 26 .         .         .         .         .         .          0.76636704 #> 27 .         .         .         .         .         0.15687373 .          #> 28 0.3182275 .         .         .         .         .          .          #> 29 .         .         .         .         .         0.92243150 .          #> 30 .         .         .         .         .         .          .          #> 31 .         .         0.3192183 .         .         .          .          #> 32 .         .         .         .         .         .          .          #> 33 .         .         .         .         .         .          .          #> 34 0.3971952 .         .         .         .         .          .          #> 35 .         .         .         .         .         0.22571387 .          #> 36 .         .         .         .         .         .          .          #> 37 .         .         0.3043558 .         .         .          0.07915158 #> 38 .         .         .         .         .         .          0.84737132 #> 39 .         0.2884208 .         .         0.2855604 .          .          #> 40 .         .         0.2253610 .         .         0.07294978 .          #> 41 .         .         .         .         0.1949143 .          .          #> 42 0.2381148 .         .         .         .         .          .          #> 43 .         .         .         .         .         .          .          #> 44 .         .         .         .         0.6305087 .          .          #> 45 .         .         .         .         .         .          .          #> 46 .         .         .         .         .         .          .          #> 47 .         0.6305087 .         .         .         .          .          #> 48 .         .         .         .         .         .          .          #> 49 .         .         .         .         .         .          .          #> 50 .         .         .         .         .         0.08459193 .          #>               #> 1  .          #> 2  .          #> 3  0.36974516 #> 4  .          #> 5  .          #> 6  .          #> 7  .          #> 8  .          #> 9  .          #> 10 .          #> 11 .          #> 12 .          #> 13 .          #> 14 .          #> 15 .          #> 16 .          #> 17 0.34011719 #> 18 .          #> 19 .          #> 20 0.69228383 #> 21 .          #> 22 .          #> 23 .          #> 24 0.73377945 #> 25 .          #> 26 .          #> 27 .          #> 28 .          #> 29 0.15378399 #> 30 .          #> 31 .          #> 32 .          #> 33 .          #> 34 .          #> 35 0.60037655 #> 36 .          #> 37 .          #> 38 .          #> 39 .          #> 40 0.60937493 #> 41 .          #> 42 .          #> 43 .          #> 44 .          #> 45 .          #> 46 .          #> 47 .          #> 48 0.08459193 #> 49 .          #> 50 ."},{"path":"/reference/filter_network.html","id":null,"dir":"Reference","previous_headings":"","what":"filter_network — filter_network","title":"filter_network — filter_network","text":"Filter Sparse Graph Retain Nodes Minimum Degree","code":""},{"path":"/reference/filter_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter_network — filter_network","text":"","code":"filter_network(adj, n_neighbors = 5)"},{"path":"/reference/filter_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter_network — filter_network","text":"adj symmetric adjacency matrix (numeric sparse). n_neighbors Integer. minimum number neighbors node must remain network (default: 5).","code":""},{"path":"/reference/filter_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter_network — filter_network","text":"filtered adjacency matrix containing nodes least `n_neighbors` connections.","code":""},{"path":"/reference/filter_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"filter_network — filter_network","text":"Iteratively removes nodes symmetric adjacency matrix remaining nodes least `n_neighbors` edges.","code":""},{"path":"/reference/filter_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"filter_network — filter_network","text":"","code":"mat <- matrix(sample(0:1, 100, replace = TRUE, prob = c(0.9, 0.1)), nrow = 10) mat[lower.tri(mat)] <- t(mat)[lower.tri(mat)] diag(mat) <- 0 filtered <- filter_network(mat, n_neighbors = 2) #> Error in base::rowSums(x, na.rm = na.rm, dims = dims, ...): 'x' must be an array of at least two dimensions"},{"path":"/reference/find_mutual_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"find_mutual_nn — find_mutual_nn","title":"find_mutual_nn — find_mutual_nn","text":"Identify Mutual Nearest Neighbors Groups","code":""},{"path":"/reference/find_mutual_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find_mutual_nn — find_mutual_nn","text":"","code":"find_mutual_nn(distance, k, dis_thresh = NULL)"},{"path":"/reference/find_mutual_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find_mutual_nn — find_mutual_nn","text":"distance numeric symmetric distance matrix. k Integer. Number neighbors consider per group. dis_thresh Optional numeric threshold. set, mutual neighbors distance < threshold returned.","code":""},{"path":"/reference/find_mutual_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find_mutual_nn — find_mutual_nn","text":"data frame mutual nearest neighbor pairs columns: group1 Index first group group2 Index second group dist Distance groups","code":""},{"path":"/reference/find_mutual_nn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find_mutual_nn — find_mutual_nn","text":"Finds mutually shared k-nearest neighbors row column perspectives distance matrix. Optionally filters distance threshold.","code":""},{"path":"/reference/find_mutual_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find_mutual_nn — find_mutual_nn","text":"","code":"dist_mat <- as.matrix(dist(matrix(rnorm(100), nrow = 10))) mnn_df <- find_mutual_nn(dist_mat, k = 3, dis_thresh = 0.5) head(mnn_df) #>   group1 group2 dist #> 1      1      1    0 #> 2      2      2    0 #> 3      3      3    0 #> 4      4      4    0 #> 5      5      5    0 #> 6      6      6    0"},{"path":"/reference/graph_clone_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"graph_clone_nn — graph_clone_nn","title":"graph_clone_nn — graph_clone_nn","text":"Compute Clone--Clone Nearest Neighbor Distances Cell Graph","code":""},{"path":"/reference/graph_clone_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph_clone_nn — graph_clone_nn","text":"","code":"graph_clone_nn(   graph,   cell_clone_prob,   prob_thresh = 0.1,   k = 2,   verbose = FALSE )"},{"path":"/reference/graph_clone_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph_clone_nn — graph_clone_nn","text":"graph `igraph` object representing cell-cell distance graph. cell_clone_prob numeric matrix clone membership probabilities (cells × clones). prob_thresh Threshold binarizing clone assignment probabilities (default: 0.1). verbose Logical. Whether print progress processing (default: FALSE). nn_k Integer. Number nearest neighbors select clone comparison (default: 2).","code":""},{"path":"/reference/graph_clone_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph_clone_nn — graph_clone_nn","text":"data frame columns `group1`, `group2`, `dis` indicating NN distance clones.","code":""},{"path":"/reference/graph_clone_nn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"graph_clone_nn — graph_clone_nn","text":"Calculates clone-level nearest neighbor distances based shared cell-cell graph. Uses binarized clone membership find inter-clone distances, applies greedy k-nearest neighbor approximation.","code":""},{"path":"/reference/graph_clone_ot.html","id":null,"dir":"Reference","previous_headings":"","what":"graph_clone_ot — graph_clone_ot","title":"graph_clone_ot — graph_clone_ot","text":"Parallel Clone--Clone OT Computation Cell Graph","code":""},{"path":"/reference/graph_clone_ot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph_clone_ot — graph_clone_ot","text":"","code":"graph_clone_ot(graph, cell_clone_prob, cache = 5000, cores = 1)"},{"path":"/reference/graph_clone_ot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph_clone_ot — graph_clone_ot","text":"graph `igraph` object representing cell-cell distance graph. cell_clone_prob matrix clone membership probabilities (cells × clones). cache Integer. Maximum number pooled cells retained memory subgraph operation (default: 5000). cores Integer. Number parallel threads use (default: 1).","code":""},{"path":"/reference/graph_clone_ot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph_clone_ot — graph_clone_ot","text":"data frame columns `group1`, `group2`, `dis` representing OT distances clone pairs.","code":""},{"path":"/reference/graph_clone_ot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"graph_clone_ot — graph_clone_ot","text":"Computes clone--clone optimal transport (OT) distances parallel first partitioning clones applying `graph_clone_ot_sub()` group. Supports memory-efficient computation subset caching.","code":""},{"path":"/reference/graph_clone_ot_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"graph_clone_ot_sub — graph_clone_ot_sub","title":"graph_clone_ot_sub — graph_clone_ot_sub","text":"Compute Pairwise OT Distances Clones Using Graph-Based Subset Strategy","code":""},{"path":"/reference/graph_clone_ot_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph_clone_ot_sub — graph_clone_ot_sub","text":"","code":"graph_clone_ot_sub(graph, cell_clone_prob, target_clone = NULL, cache = 5000)"},{"path":"/reference/graph_clone_ot_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph_clone_ot_sub — graph_clone_ot_sub","text":"graph `igraph` object representing cell-cell distances. cell_clone_prob matrix clone membership probabilities (cells × clones). target_clone Optional. Vector clone indices compute pairwise OT (default: `NULL` = ). cache Integer. Maximum number pooled cells retained memory iteration (default: 5000).","code":""},{"path":"/reference/graph_clone_ot_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph_clone_ot_sub — graph_clone_ot_sub","text":"matrix columns: `group1`, `group2`, `dis` clone pair OT distance.","code":""},{"path":"/reference/graph_clone_ot_sub.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"graph_clone_ot_sub — graph_clone_ot_sub","text":"Computes clone--clone optimal transport distances expanding local graph-based cell neighborhood using subset pool strategy reduce computational burden.","code":""},{"path":"/reference/group_2_min.html","id":null,"dir":"Reference","previous_headings":"","what":"group_2_min — group_2_min","title":"group_2_min — group_2_min","text":"Compute Average Minimal Pairwise Distance Two Groups","code":""},{"path":"/reference/group_2_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"group_2_min — group_2_min","text":"","code":"group_2_min(distance, group1, group2, k = 3)"},{"path":"/reference/group_2_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"group_2_min — group_2_min","text":"distance numeric matrix pairwise distances (e.g., `dist()` `igraph::distances()`). group1 vector row indices corresponding group 1. group2 vector column indices corresponding group 2. k Integer. Number nearest neighbors average (default: 3).","code":""},{"path":"/reference/group_2_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"group_2_min — group_2_min","text":"single numeric value representing symmetric average distance two groups.","code":""},{"path":"/reference/group_2_min.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"group_2_min — group_2_min","text":"Estimates symmetric inter-group distance based averaging top-k smallest pairwise distances two groups. useful comparing cell groups clone sets using local-neighborhood approximation intergroup proximity. submatrix `group1` `group2` one value, value returned. Otherwise, function returns mean average top-k distances across rows columns.","code":""},{"path":"/reference/group_2_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"group_2_min — group_2_min","text":"","code":"dist_mat <- matrix(runif(100), nrow = 10) d <- group_2_min(dist_mat, group1 = 1:3, group2 = 4:6, k = 2) #> Error in group_2_min(dist_mat, group1 = 1:3, group2 = 4:6, k = 2): could not find function \"group_2_min\" print(d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'print': object 'd' not found"},{"path":"/reference/is_symmetric.html","id":null,"dir":"Reference","previous_headings":"","what":"is_symmetric — is_symmetric","title":"is_symmetric — is_symmetric","text":"Check Matrix Symmetric","code":""},{"path":"/reference/is_symmetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_symmetric — is_symmetric","text":"","code":"is_symmetric(matrix)"},{"path":"/reference/is_symmetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_symmetric — is_symmetric","text":"matrix square numeric matrix.","code":""},{"path":"/reference/is_symmetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_symmetric — is_symmetric","text":"Logical value: `TRUE` matrix symmetric, `FALSE` otherwise.","code":""},{"path":"/reference/is_symmetric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"is_symmetric — is_symmetric","text":"Determines whether matrix equal transpose within numerical tolerance.","code":""},{"path":"/reference/is_symmetric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is_symmetric — is_symmetric","text":"","code":"mat <- matrix(c(1, 2, 2, 1), nrow = 2) is_symmetric(mat)  # TRUE #> [1] TRUE"},{"path":"/reference/knn_between_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"knn_between_groups — knn_between_groups","title":"knn_between_groups — knn_between_groups","text":"Compute k-Nearest Neighbors Groups","code":""},{"path":"/reference/knn_between_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"knn_between_groups — knn_between_groups","text":"","code":"knn_between_groups(distance, k)"},{"path":"/reference/knn_between_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"knn_between_groups — knn_between_groups","text":"distance numeric symmetric distance matrix. k Integer. Number nearest neighbors find group.","code":""},{"path":"/reference/knn_between_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"knn_between_groups — knn_between_groups","text":"data frame columns: group1 Row index source group group2 Index neighbor group dist Distance group1 group2","code":""},{"path":"/reference/knn_between_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"knn_between_groups — knn_between_groups","text":"row distance matrix, returns indices distances k nearest neighbors (smallest distances). Returns long-format data frame (, j) pairs.","code":""},{"path":"/reference/knn_between_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"knn_between_groups — knn_between_groups","text":"","code":"dist_mat <- as.matrix(dist(matrix(rnorm(100), nrow = 10))) knn_df <- knn_between_groups(dist_mat, k = 3) head(knn_df) #>   group1 group2     dist #> 1      1      1 0.000000 #> 2      1      6 2.794293 #> 3      1      9 3.180575 #> 4      2      2 0.000000 #> 5      2      5 3.672408 #> 6      2      6 3.863716"},{"path":"/reference/knn_flat.html","id":null,"dir":"Reference","previous_headings":"","what":"knn_flat — knn_flat","title":"knn_flat — knn_flat","text":"Compute Flattened k-Nearest Neighbor Edges","code":""},{"path":"/reference/knn_flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"knn_flat — knn_flat","text":"","code":"knn_flat(   x,   k,   input = \"matrix\",   symmetric = FALSE,   if_dedup = FALSE,   if_self = FALSE )"},{"path":"/reference/knn_flat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"knn_flat — knn_flat","text":"x numeric matrix (rows = points) distance matrix. k Integer. Number neighbors compute per point. input Character. Either `\"matrix\"` `\"dist\"` (default: `\"matrix\"`). symmetric Logical. `TRUE`, ensures bidirectional edges (default: `FALSE`). if_dedup Logical. `TRUE`, removes redundant (,j)/(j,) pairs (default: `FALSE`). if_self Logical. `TRUE`, includes self-edges (,) distance 0 (default: `FALSE`).","code":""},{"path":"/reference/knn_flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"knn_flat — knn_flat","text":"data frame columns `node1`, `node2`, `dist`.","code":""},{"path":"/reference/knn_flat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"knn_flat — knn_flat","text":"Computes flattened list k-nearest neighbor edges point matrix distance matrix. Returns long-format data frame neighbor pairs distances, optional symmetry, self-edges, deduplication.","code":""},{"path":"/reference/knn_flat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"knn_flat — knn_flat","text":"","code":"mat <- matrix(rnorm(100), ncol = 2) edges <- knn_flat(mat, k = 5, symmetric = TRUE) head(edges) #>   node1 node2      dist #> 1     1     4 0.7959368 #> 2     1    11 0.8004962 #> 3     1    33 0.6441148 #> 4     1    34 0.8218438 #> 5     1    37 0.9045511 #> 6     2    20 0.3022240"},{"path":"/reference/label_spreading.html","id":null,"dir":"Reference","previous_headings":"","what":"label_spreading — label_spreading","title":"label_spreading — label_spreading","text":"Label Propagation via Iterative Graph-Based Spreading","code":""},{"path":"/reference/label_spreading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"label_spreading — label_spreading","text":"","code":"label_spreading(   adj,   labels,   label_n = NULL,   alpha = 0.9,   max_iter = 100,   tol = 0.001,   epsilon = 0,   verbose = TRUE )"},{"path":"/reference/label_spreading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"label_spreading — label_spreading","text":"adj square adjacency matrix (preferably sparse) representing graph. labels integer vector length equal number nodes. Use `NA` unlabeled entries. label_n Optional. number label classes. `NULL`, inferred `max(labels, na.rm = TRUE)`. alpha Float (0, 1). propagation coefficient controlling balance prior propagated labels (default: 0.9). max_iter Maximum number iterations propagation (default: 100). tol Convergence threshold (default: 1e-3). epsilon Small prior assigned unlabeled entries (default: 0). verbose Logical. Whether print progress convergence status (default: TRUE).","code":""},{"path":"/reference/label_spreading.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"label_spreading — label_spreading","text":"matrix size N x C row contains soft label probabilities node across `C` classes.","code":""},{"path":"/reference/label_spreading.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"label_spreading — label_spreading","text":"Performs semi-supervised label propagation graph using sparse dense adjacency matrix. algorithm propagates known labels across graph structure, allowing soft label assignment unlabeled nodes.","code":""},{"path":"/reference/label_spreading.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"label_spreading — label_spreading","text":"","code":"if (FALSE) { set.seed(1) adj <- Matrix::rsparsematrix(100, 100, density = 0.05) labels <- rep(NA, 100) labels[1:10] <- sample(1:3, 10, replace = TRUE) prob_matrix <- label_spreading(adj, labels) }"},{"path":"/reference/label_spreading_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"label_spreading_bootstrap — label_spreading_bootstrap","title":"label_spreading_bootstrap — label_spreading_bootstrap","text":"Bootstrap-Based Stability Estimation Label Propagation","code":""},{"path":"/reference/label_spreading_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"label_spreading_bootstrap — label_spreading_bootstrap","text":"","code":"label_spreading_bootstrap(   adj,   labels,   refer = NULL,   alpha = 0.8,   sample_rate = 0.8,   sample_n = 50,   ... )"},{"path":"/reference/label_spreading_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"label_spreading_bootstrap — label_spreading_bootstrap","text":"adj square adjacency matrix (preferably sparse) representing graph. labels integer vector length equal number nodes. Use `NA` unlabeled entries. refer Optional. reference soft label matrix (N x C). provided, computed full label set. alpha Float (0, 1). propagation coefficient controlling balance prior propagated labels (default: 0.9). sample_rate Fraction labeled nodes used bootstrap sample (default: 0.8). sample_n Number bootstrap replicates (default: 50). ... Additional arguments passed `label_spreading()`.","code":""},{"path":"/reference/label_spreading_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"label_spreading_bootstrap — label_spreading_bootstrap","text":"numeric vector length N giving deviance node's label probabilities reference across bootstraps.","code":""},{"path":"/reference/label_spreading_bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"label_spreading_bootstrap — label_spreading_bootstrap","text":"Repeatedly applies `label_spreading()` subsampled label sets assess stability uncertainty label propagation results. Returns node-level deviance score indicating variability across bootstrap runs.","code":""},{"path":"/reference/label_spreading_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"label_spreading_bootstrap — label_spreading_bootstrap","text":"","code":"if (FALSE) { adj <- Matrix::rsparsematrix(100, 100, density = 0.05) labels <- rep(NA, 100) labels[1:10] <- sample(1:3, 10, replace = TRUE) deviance_scores <- label_spreading_bootstrap(adj, labels) }"},{"path":"/reference/leiden_dis.html","id":null,"dir":"Reference","previous_headings":"","what":"leiden_dis — leiden_dis","title":"leiden_dis — leiden_dis","text":"Leiden Clustering Precomputed Distance Matrix","code":""},{"path":"/reference/leiden_dis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"leiden_dis — leiden_dis","text":"","code":"leiden_dis(   dismat,   k = 10,   prune.snn = 0,   weight = \"jaccard\",   resolution = 1,   if_umap = TRUE )"},{"path":"/reference/leiden_dis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"leiden_dis — leiden_dis","text":"dismat symmetric distance matrix (e.g., `dist()`). k Integer. Number neighbors SNN construction (default: 10). prune.snn Numeric threshold prune SNN edges (default: 0). weight Character. Column use edge weight (`\"jaccard\"` `\"dis\"`) (default: `\"jaccard\"`). resolution Numeric resolution parameter Leiden clustering (default: 1). if_umap Logical. `TRUE`, returns UMAP coordinates cluster annotations (default: TRUE).","code":""},{"path":"/reference/leiden_dis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"leiden_dis — leiden_dis","text":"`if_umap = TRUE`, returns data frame UMAP coordinates cluster labels. Otherwise, returns factor vector cluster memberships.","code":""},{"path":"/reference/leiden_dis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"leiden_dis — leiden_dis","text":"Constructs SNN graph distance matrix, applies Leiden clustering, optionally returns UMAP layout annotated clusters.","code":""},{"path":"/reference/leiden_dis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"leiden_dis — leiden_dis","text":"","code":"mat <- matrix(rnorm(500), nrow = 100) dmat <- dist(mat) clusters <- leiden_dis(as.matrix(dmat), k = 15, if_umap = FALSE)"},{"path":"/reference/leiden_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"leiden_embedding — leiden_embedding","title":"leiden_embedding — leiden_embedding","text":"Run Leiden Clustering Embedding via Shared Nearest Neighbors","code":""},{"path":"/reference/leiden_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"leiden_embedding — leiden_embedding","text":"","code":"leiden_embedding(   data,   k = 30,   prune.snn = 0,   weight = \"jaccard\",   resolution = 1 )"},{"path":"/reference/leiden_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"leiden_embedding — leiden_embedding","text":"data numeric matrix data frame rows observations columns features. k Integer. Number nearest neighbors SNN construction (default: 30). prune.snn Numeric. Threshold SNN edges removed (default: 0). weight Character. Column use edge weight (`\"jaccard\"` `\"dis\"`) (default: `\"jaccard\"`). resolution Numeric resolution parameter clustering (default: 1).","code":""},{"path":"/reference/leiden_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"leiden_embedding — leiden_embedding","text":"factor vector cluster memberships row `data`.","code":""},{"path":"/reference/leiden_embedding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"leiden_embedding — leiden_embedding","text":"Constructs shared nearest neighbor (SNN) graph embedding matrix (e.g., PCA, UMAP), optionally prunes weak connections, performs Louvain Leiden clustering.","code":""},{"path":"/reference/leiden_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"leiden_embedding — leiden_embedding","text":"","code":"mat <- matrix(rnorm(500), nrow = 100) clusters <- leiden_embedding(mat, k = 20) #> Error in igraph::cluster_louvain(dis_snn_graph, resolution = resolution): object 'dis_snn_graph' not found table(clusters) #> Error in table(clusters): object 'clusters' not found"},{"path":"/reference/leiden_embedding_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"leiden_embedding_fast — leiden_embedding_fast","title":"leiden_embedding_fast — leiden_embedding_fast","text":"Fast Leiden Clustering Using Sparse Shared Nearest Neighbors","code":""},{"path":"/reference/leiden_embedding_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"leiden_embedding_fast — leiden_embedding_fast","text":"","code":"leiden_embedding_fast(   data,   k = 30,   prune.snn = 0,   weight = \"jaccard\",   resolution = 1 )"},{"path":"/reference/leiden_embedding_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"leiden_embedding_fast — leiden_embedding_fast","text":"data numeric matrix embeddings (e.g., PCA, UMAP). k Integer. Number nearest neighbors (default: 30). prune.snn Numeric threshold prune weak SNN edges (default: 0). weight Character. Weighting scheme (currently unused; default: `\"jaccard\"`). resolution Resolution parameter Leiden clustering (default: 1).","code":""},{"path":"/reference/leiden_embedding_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"leiden_embedding_fast — leiden_embedding_fast","text":"factor vector cluster labels.","code":""},{"path":"/reference/leiden_embedding_fast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"leiden_embedding_fast — leiden_embedding_fast","text":"Efficient implementation SNN graph construction Leiden clustering. Uses matrix algebra fast computation shared neighbors Jaccard similarity.","code":""},{"path":"/reference/leiden_embedding_fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"leiden_embedding_fast — leiden_embedding_fast","text":"","code":"mat <- matrix(rnorm(500), nrow = 100) clusters <- leiden_embedding_fast(mat, k = 20) #> Error in if (ncol(result) < 3) {    result <- cbind(result, 1)}: argument is of length zero table(clusters) #> Error in table(clusters): object 'clusters' not found"},{"path":"/reference/link2cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"link2cluster — link2cluster","title":"link2cluster — link2cluster","text":"Cluster Nodes Based Link Connectivity","code":""},{"path":"/reference/link2cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"link2cluster — link2cluster","text":"","code":"link2cluster(link, nodes)"},{"path":"/reference/link2cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"link2cluster — link2cluster","text":"link data frame two columns (, j) indicating node pairs links. nodes character factor vector node names clustered.","code":""},{"path":"/reference/link2cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"link2cluster — link2cluster","text":"numeric vector cluster labels node, assigned DBSCAN.","code":""},{"path":"/reference/link2cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"link2cluster — link2cluster","text":"Given set links node pairs list nodes, function constructs symmetric adjacency matrix, applies diffusion expand connectivity, clusters result using DBSCAN.","code":""},{"path":"/reference/link2cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"link2cluster — link2cluster","text":"","code":"link_df <- data.frame(i = c(\"A\", \"B\", \"C\"), j = c(\"B\", \"C\", \"A\")) clusters <- link2cluster(link_df, nodes = c(\"A\", \"B\", \"C\")) #> Error in link2cluster(link_df, nodes = c(\"A\", \"B\", \"C\")): could not find function \"link2cluster\" print(clusters) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'print': object 'clusters' not found"},{"path":"/reference/long2sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"long2sparse — long2sparse","title":"long2sparse — long2sparse","text":"Convert Long-Format Data Frame Sparse Matrix","code":""},{"path":"/reference/long2sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"long2sparse — long2sparse","text":"","code":"long2sparse(   long,   row_names_from,   col_names_from,   values_from,   unique_rows = NULL,   unique_cols = NULL,   symmetric = FALSE )"},{"path":"/reference/long2sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"long2sparse — long2sparse","text":"long data frame long format least three columns: row ID, column ID, value. row_names_from Name column `long` use row names output. col_names_from Name column `long` use column names output. values_from Name column `long` use cell values output matrix. unique_rows Optional character factor vector defining full set order row names. unique_cols Optional character factor vector defining full set order column names. symmetric Logical. `TRUE`, creates symmetric matrix adding reversed entries (default: FALSE).","code":""},{"path":"/reference/long2sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"long2sparse — long2sparse","text":"sparse matrix class `dgCMatrix` row column names.","code":""},{"path":"/reference/long2sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"long2sparse — long2sparse","text":"Converts long-format data frame representing pairwise relationships sparse matrix (`dgCMatrix`), optional symmetry enforcement customizable row/column ordering.","code":""},{"path":"/reference/long2sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"long2sparse — long2sparse","text":"","code":"long_df <- data.frame(from = c(\"A\", \"B\"), to = c(\"B\", \"C\"), value = c(1, 2)) spmat <- long2sparse(long_df, \"from\", \"to\", \"value\") print(spmat) #> 2 x 2 sparse Matrix of class \"dgCMatrix\" #>   B C #> A 1 . #> B . 2"},{"path":"/reference/long2square.html","id":null,"dir":"Reference","previous_headings":"","what":"long2square — long2square","title":"long2square — long2square","text":"Convert Long Format Data Frame Square Matrix","code":""},{"path":"/reference/long2square.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"long2square — long2square","text":"","code":"long2square(   long,   row_names_from,   col_names_from,   values_from,   symmetric = TRUE,   na.fill = NA,   nodes = NULL )"},{"path":"/reference/long2square.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"long2square — long2square","text":"long data frame long format least three columns: row ID, column ID, value. row_names_from Name column `long` use row names output. col_names_from Name column `long` use column names output. values_from Name column `long` use cell values output matrix. symmetric Logical. `TRUE`, output forced symmetric duplicating reversed entries. na.fill Value fill missing matrix entries (default: NA). nodes Optional. character vector specifying full set row/column labels.","code":""},{"path":"/reference/long2square.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"long2square — long2square","text":"square numeric matrix rows columns defined node set.","code":""},{"path":"/reference/long2square.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"long2square — long2square","text":"Converts long-format data frame (pairwise relationships) square numeric matrix. Optionally enforces symmetry fills missing values.","code":""},{"path":"/reference/long2square.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"long2square — long2square","text":"","code":"long_df <- data.frame(from = c(\"A\", \"B\"), to = c(\"B\", \"A\"), value = c(1, 2)) square_mat <- long2square(long_df, row_names_from = \"from\", col_names_from = \"to\", values_from = \"value\") #> Warning: Values from `value` are not uniquely identified; output will contain list-cols. #> • Use `values_fn = list` to suppress this warning. #> • Use `values_fn = {summary_fun}` to summarise duplicates. #> • Use the following dplyr code to identify duplicates. #>   {data} |> #>   dplyr::summarise(n = dplyr::n(), .by = c(from, to)) |> #>   dplyr::filter(n > 1L) print(square_mat) #>   A         B         #> A NULL      numeric,2 #> B numeric,2 NULL"},{"path":"/reference/long2wide.html","id":null,"dir":"Reference","previous_headings":"","what":"long2wide — long2wide","title":"long2wide — long2wide","text":"Convert Long Format Data Frame Symmetric Asymmetric Wide Matrix","code":""},{"path":"/reference/long2wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"long2wide — long2wide","text":"","code":"long2wide(long, row_names_from, col_names_from, values_from, symmetric = FALSE)"},{"path":"/reference/long2wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"long2wide — long2wide","text":"long data frame long format least three columns: row ID, column ID, value. row_names_from Name column `long` use row names output. col_names_from Name column `long` use column names output. values_from Name column `long` use cell values output matrix. symmetric Logical. `TRUE`, output forced symmetric duplicating reversed entries.","code":""},{"path":"/reference/long2wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"long2wide — long2wide","text":"wide-format data frame matrix row names column names specified, cell values come `values_from`.","code":""},{"path":"/reference/long2wide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"long2wide — long2wide","text":"Converts long-format data frame row/column/value identifiers wide-format matrix-style data frame. Optionally enforces matrix symmetry duplicating merging reversed entries.","code":""},{"path":"/reference/long2wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"long2wide — long2wide","text":"","code":"long_df <- data.frame(from = c(\"A\", \"B\"), to = c(\"B\", \"A\"), value = c(1, 2)) mat <- long2wide(long_df, row_names_from = \"from\", col_names_from = \"to\", values_from = \"value\") print(mat) #>    B  A #> A  1 NA #> B NA  2"},{"path":"/reference/long_symmetry.html","id":null,"dir":"Reference","previous_headings":"","what":"long_symmetry — long_symmetry","title":"long_symmetry — long_symmetry","text":"Enforce Symmetry Long-Format Pairwise Data Frame","code":""},{"path":"/reference/long_symmetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"long_symmetry — long_symmetry","text":"","code":"long_symmetry(long, row_names_from, col_names_from)"},{"path":"/reference/long_symmetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"long_symmetry — long_symmetry","text":"long long-format data frame least two ID columns one data columns. row_names_from Name column representing source node element. col_names_from Name column representing target node element.","code":""},{"path":"/reference/long_symmetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"long_symmetry — long_symmetry","text":"symmetric long-format data frame reversed entries added sorted.","code":""},{"path":"/reference/long_symmetry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"long_symmetry — long_symmetry","text":"Ensures symmetric representation long-format data adding reversed pairs removing duplicates. Useful converting pairwise relationships (e.g., distances similarities) symmetric forms.","code":""},{"path":"/reference/long_symmetry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"long_symmetry — long_symmetry","text":"","code":"long_df <- data.frame(from = c(\"A\", \"B\"), to = c(\"B\", \"C\"), value = c(1, 2)) sym_df <- long_symmetry(long_df, row_names_from = \"from\", col_names_from = \"to\") print(sym_df) #>   from to value #> 1    A  B     1 #> 2    B  A     1 #> 3    B  C     2 #> 4    C  B     2"},{"path":"/reference/mass_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"mass_filter — mass_filter","title":"mass_filter — mass_filter","text":"Filter Vector Elements Cumulative Mass Threshold","code":""},{"path":"/reference/mass_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mass_filter — mass_filter","text":"","code":"mass_filter(mass, thresh = 0.9)"},{"path":"/reference/mass_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mass_filter — mass_filter","text":"mass numeric vector values (e.g., weights, similarities, densities). thresh Numeric. Proportion total cumulative mass retain (default: 0.9).","code":""},{"path":"/reference/mass_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mass_filter — mass_filter","text":"numeric vector length `mass`, low-contributing elements set zero.","code":""},{"path":"/reference/mass_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mass_filter — mass_filter","text":"Retains top elements numeric vector based cumulative mass. Elements contributing least total zeroed specified proportion total mass (`thresh`) retained. function normalizes input sum 1, ranks elements size, sets zero contributing cutoff needed achieve `thresh` cumulative mass. Useful sparsifying matrices.","code":""},{"path":"/reference/mass_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mass_filter — mass_filter","text":"","code":"x <- runif(10) filtered <- mass_filter(x, thresh = 0.8) print(filtered) #>  [1] 0.0000000 0.0000000 0.5082687 0.4916758 0.0000000 0.6589923 0.6598774 #>  [8] 0.0000000 0.0000000 0.8191545"},{"path":"/reference/mat_sparsify.html","id":null,"dir":"Reference","previous_headings":"","what":"mat_sparsify — mat_sparsify","title":"mat_sparsify — mat_sparsify","text":"Sparsify Dense Matrix Cumulative Mass Filtering","code":""},{"path":"/reference/mat_sparsify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mat_sparsify — mat_sparsify","text":"","code":"mat_sparsify(mat, row_mass = 0.9, col_mass = 0.9)"},{"path":"/reference/mat_sparsify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mat_sparsify — mat_sparsify","text":"mat numeric matrix. row_mass Proportion row-wise cumulative mass retain (default: 0.9). col_mass Proportion column-wise cumulative mass retain (default: 0.9).","code":""},{"path":"/reference/mat_sparsify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mat_sparsify — mat_sparsify","text":"sparsified matrix shape many zero entries.","code":""},{"path":"/reference/mat_sparsify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mat_sparsify — mat_sparsify","text":"Applies mass-based thresholding rows columns keep informative values. row/column, entries retained cumulative sum reaches specified mass (e.g., 90","code":""},{"path":"/reference/mat_sparsify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mat_sparsify — mat_sparsify","text":"","code":"mat <- matrix(runif(100), nrow = 10) mat_sparse <- mat_sparsify(mat, row_mass = 0.8, col_mass = 0.8) print(mat_sparse) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 0.0000000 0.0000000 0.0000000 0.9009332 0.8448093 0.0000000 0.0000000 #>  [2,] 0.0000000 0.0000000 0.9587667 0.8515347 0.7761037 0.9785804 0.9982637 #>  [3,] 0.8481066 0.0000000 0.9668923 0.0000000 0.0000000 0.0000000 0.7109441 #>  [4,] 0.8759437 0.9256773 0.0000000 0.0000000 0.0000000 0.9951824 0.9162931 #>  [5,] 0.0000000 0.7904869 0.8850977 0.0000000 0.0000000 0.0000000 0.7834048 #>  [6,] 0.8993639 0.0000000 0.8600141 0.8267845 0.0000000 0.0000000 0.0000000 #>  [7,] 0.0000000 0.0000000 0.8572805 0.0000000 0.0000000 0.0000000 0.6555618 #>  [8,] 0.8229108 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [9,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [10,] 0.0000000 0.0000000 0.0000000 0.0000000 0.7919232 0.7159001 0.6408825 #>            [,8]      [,9]     [,10] #>  [1,] 0.0000000 0.7280732 0.9948426 #>  [2,] 0.0000000 0.0000000 0.0000000 #>  [3,] 0.0000000 0.0000000 0.0000000 #>  [4,] 0.7027963 0.0000000 0.0000000 #>  [5,] 0.0000000 0.7480587 0.9887503 #>  [6,] 0.0000000 0.0000000 0.0000000 #>  [7,] 0.7381451 0.0000000 0.0000000 #>  [8,] 0.0000000 0.0000000 0.0000000 #>  [9,] 0.0000000 0.0000000 0.0000000 #> [10,] 0.0000000 0.8746683 0.0000000"},{"path":"/reference/mat_split.html","id":null,"dir":"Reference","previous_headings":"","what":"mat_split — mat_split","title":"mat_split — mat_split","text":"Split Matrix Row Column Chunks","code":""},{"path":"/reference/mat_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mat_split — mat_split","text":"","code":"mat_split(mat, size, index = 0)"},{"path":"/reference/mat_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mat_split — mat_split","text":"mat matrix split. size integer vector specifying size chunk (rows columns). index Integer. `0` (default), splits rows; `1`, splits columns.","code":""},{"path":"/reference/mat_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mat_split — mat_split","text":"list matrices representing chunks.","code":""},{"path":"/reference/mat_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mat_split — mat_split","text":"Splits matrix smaller matrices based user-defined row column sizes.","code":""},{"path":"/reference/mat_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mat_split — mat_split","text":"","code":"mat <- matrix(1:20, nrow = 5) chunks <- mat_split(mat, size = c(2, 3), index = 0) str(chunks) #> List of 2 #>  $ : int [1:2, 1:4] 1 2 6 7 11 12 16 17 #>  $ : int [1:3, 1:4] 3 4 5 8 9 10 13 14 15 18 ..."},{"path":"/reference/mds_from_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"mds_from_knn — mds_from_knn","title":"mds_from_knn — mds_from_knn","text":"Compute MDS Embedding kNN Graph","code":""},{"path":"/reference/mds_from_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mds_from_knn — mds_from_knn","text":"","code":"mds_from_knn(adj, n_components = 15)"},{"path":"/reference/mds_from_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mds_from_knn — mds_from_knn","text":"adj sparse adjacency matrix (class `dgCMatrix`) representing kNN graph. n_components Integer. Number MDS dimensions return (default: 15).","code":""},{"path":"/reference/mds_from_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mds_from_knn — mds_from_knn","text":"data frame size (nodes × `n_components`) column names `mds_1`, `mds_2`, ..., rownames `adj`.","code":""},{"path":"/reference/mds_from_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mds_from_knn — mds_from_knn","text":"Computes multi-dimensional scaling (MDS) embedding filtered adjacency matrix representing kNN graph. Requires Python-based backend function (e.g., `mds_from_knn_py()`) perform embedding.","code":""},{"path":"/reference/mnn_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"mnn_dist — mnn_dist","title":"mnn_dist — mnn_dist","text":"Identify Mutual Nearest Neighbors (MNN) Distance Matrix","code":""},{"path":"/reference/mnn_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mnn_dist — mnn_dist","text":"","code":"mnn_dist(dis, k)"},{"path":"/reference/mnn_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mnn_dist — mnn_dist","text":"dis symmetric distance matrix (`dist` matrix) representing pairwise distances. k Integer. Number nearest neighbors consider.","code":""},{"path":"/reference/mnn_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mnn_dist — mnn_dist","text":"data frame columns `` `j`, representing mutual nearest neighbor pairs `< j`.","code":""},{"path":"/reference/mnn_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mnn_dist — mnn_dist","text":"Computes mutual nearest neighbors items based symmetric distance matrix. pair (, j) considered mutual among k nearest neighbors j, j among k nearest neighbors .","code":""},{"path":"/reference/mnn_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mnn_dist — mnn_dist","text":"","code":"dist_mat <- dist(matrix(rnorm(100), ncol = 5)) mnn_pairs <- mnn_dist(dist_mat, k = 5) head(mnn_pairs) #>   i  j #> 1 2  7 #> 2 5  7 #> 3 6 16 #> 4 7 17 #> 5 8 10 #> 6 9 11"},{"path":"/reference/nearest_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"nearest_knn — nearest_knn","title":"nearest_knn — nearest_knn","text":"Extract Top k Nearest Neighbor Pairs Distance","code":""},{"path":"/reference/nearest_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nearest_knn — nearest_knn","text":"","code":"nearest_knn(dis, k, top = 3)"},{"path":"/reference/nearest_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nearest_knn — nearest_knn","text":"dis symmetric distance matrix (`dist` matrix). k Integer. Number nearest neighbors compute per item. top Integer. Number top-ranked unique nearest neighbor pairs return (default: 3).","code":""},{"path":"/reference/nearest_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nearest_knn — nearest_knn","text":"data frame columns ``, `j`, `dis`, listing top nearest neighbor pairs distances.","code":""},{"path":"/reference/nearest_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"nearest_knn — nearest_knn","text":"Returns top closest k-nearest neighbor pairs based pairwise distances, excluding duplicates.","code":""},{"path":"/reference/nearest_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nearest_knn — nearest_knn","text":"","code":"dist_mat <- dist(matrix(rnorm(100), ncol = 5)) top_pairs <- nearest_knn(dist_mat, k = 5, top = 10) head(top_pairs) #>     i  j       dis #> 1   6 10 0.5976470 #> 3   6  7 0.7377675 #> 5   2 20 0.8554354 #> 7  13 20 0.9773879 #> 9   7  9 1.0302414 #> 11 10 20 1.0479293"},{"path":"/reference/profile_cluster_DEG.html","id":null,"dir":"Reference","previous_headings":"","what":"profile_cluster_DEG — profile_cluster_DEG","title":"profile_cluster_DEG — profile_cluster_DEG","text":"Differential Expression Profile Background Single Cluster","code":""},{"path":"/reference/profile_cluster_DEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"profile_cluster_DEG — profile_cluster_DEG","text":"","code":"profile_cluster_DEG(   profile,   cluster,   exprs,   cell_meta,   cell_profile_prob,   cluster_col = \"cluster\",   pseudotime_col = \"cell_t\",   permute_n = 50 )"},{"path":"/reference/profile_cluster_DEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"profile_cluster_DEG — profile_cluster_DEG","text":"profile Character numeric vector indicating profiles test. cluster Character factor. Name ID cluster analyze. exprs gene expression matrix (genes × cells). cell_meta data frame cell-level metadata (must include pseudotime cluster labels). cell_profile_prob numeric matrix profile probabilities (cells × profiles). cluster_col Name column `cell_meta` cluster labels (default: `\"cluster\"`). pseudotime_col Name column `cell_meta` representing pseudotime (default: `\"cell_t\"`). permute_n Integer. Number permutations null model generation (default: 50).","code":""},{"path":"/reference/profile_cluster_DEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"profile_cluster_DEG — profile_cluster_DEG","text":"list containing: stat Data frame statistics, empirical p-values, FDR-adjusted p-values  cell Character vector cell IDs used test  design_null, design_full, coef, df Model components GAM fitting","code":""},{"path":"/reference/profile_cluster_DEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"profile_cluster_DEG — profile_cluster_DEG","text":"Performs pseudotime-aware differential expression testing target profile control background within specific transcriptional cluster. Combines soft cluster-weighted regression permutation-derived null distributions assess gene-level significance.","code":""},{"path":"/reference/profile_cluster_DEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"profile_cluster_DEG — profile_cluster_DEG","text":"","code":"# Assuming cell_meta, exprs, and cell_profile_prob are defined res <- profile_cluster_DEG(\"P1\", cluster = \"C2\", exprs, cell_meta, cell_profile_prob) #> Error in as.data.frame(cell_meta): object 'cell_meta' not found head(res$stat) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'head': object 'res' not found"},{"path":"/reference/profile_cluster_DEG_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","title":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","text":"Permutation Null Distribution Profile-Based Differential Expression","code":""},{"path":"/reference/profile_cluster_DEG_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","text":"","code":"profile_cluster_DEG_permute(P, G, dpt, n = 50)"},{"path":"/reference/profile_cluster_DEG_permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","text":"P matrix soft profile assignments cell (cells × 2, typically: target vs. control). G gene expression matrix (genes × cells). dpt numeric pseudotime vector (length = number columns `G`). n Integer. Number permutations (default: 50).","code":""},{"path":"/reference/profile_cluster_DEG_permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","text":"list p-value vectors (one per permutation) representing null distribution.","code":""},{"path":"/reference/profile_cluster_DEG_permute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","text":"Computes null distribution p-values profile-based differential gene expression repeatedly permuting soft profile assignment matrix. supports empirical calibration DE gene significance pseudotime analysis.","code":""},{"path":"/reference/profile_cluster_DEG_permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"profile_cluster_DEG_permute — profile_cluster_DEG_permute","text":"","code":"# Simulated example G <- matrix(rnorm(5000), nrow = 100) P <- matrix(runif(200), nrow = 100) P <- cbind(target = P[, 1], control = 1 - P[, 1]) dpt <- seq(0, 1, length.out = 100) null_pvals <- profile_cluster_DEG_permute(P, G, dpt, n = 10) #> Error in profile_cluster_DEG_permute(P, G, dpt, n = 10): could not find function \"profile_cluster_DEG_permute\" length(null_pvals) #> Error in eval(expr, envir, enclos): object 'null_pvals' not found"},{"path":"/reference/profile_multiclusters_DEG.html","id":null,"dir":"Reference","previous_headings":"","what":"profile_multiclusters_DEG — profile_multiclusters_DEG","title":"profile_multiclusters_DEG — profile_multiclusters_DEG","text":"Profile-Specific Differential Expression Across Multiple Clusters","code":""},{"path":"/reference/profile_multiclusters_DEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"profile_multiclusters_DEG — profile_multiclusters_DEG","text":"","code":"profile_multiclusters_DEG(   profile,   exprs,   cell_meta,   cell_profile_prob,   clusters = NULL,   cluster_col = \"cluster\",   pseudotime_col = \"cell_t\",   mass_thresh = 100 )"},{"path":"/reference/profile_multiclusters_DEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"profile_multiclusters_DEG — profile_multiclusters_DEG","text":"profile Character. Profile name index test. exprs gene expression matrix (genes × cells). cell_meta data frame cell-level metadata (includes pseudotime cluster labels). cell_profile_prob Matrix soft profile probabilities (cells × profiles). clusters Optional. vector cluster names test. `NULL`, clusters used. cluster_col Name cluster label column `cell_meta` (default: `\"cluster\"`). pseudotime_col Name pseudotime column `cell_meta` (default: `\"cell_t\"`). mass_thresh Minimum profile mass cluster required perform DE test (default: 100).","code":""},{"path":"/reference/profile_multiclusters_DEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"profile_multiclusters_DEG — profile_multiclusters_DEG","text":"named list DE test results, one qualifying cluster.","code":""},{"path":"/reference/profile_multiclusters_DEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"profile_multiclusters_DEG — profile_multiclusters_DEG","text":"Applies `profile_cluster_DEG()` set clusters identify genes associated specific profile across transcriptional landscape. Skips clusters profile mass threshold.","code":""},{"path":"/reference/profile_multiclusters_DEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"profile_multiclusters_DEG — profile_multiclusters_DEG","text":"","code":"res_list <- profile_multiclusters_DEG(\"P1\", exprs, cell_meta, cell_profile_prob) #> Error in as.matrix(cell_profile_prob): object 'cell_profile_prob' not found names(res_list) #> Error in eval(expr, envir, enclos): object 'res_list' not found"},{"path":"/reference/ridge_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"ridge_regression — ridge_regression","title":"ridge_regression — ridge_regression","text":"Ridge Regression Gene Expression Modeling","code":""},{"path":"/reference/ridge_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ridge_regression — ridge_regression","text":"","code":"ridge_regression(X, G, lambda = 1e-04)"},{"path":"/reference/ridge_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ridge_regression — ridge_regression","text":"X numeric matrix predictors (cells × features). G numeric response matrix vector. Must match number rows `X` (cells × genes 1). lambda Non-negative regularization strength ridge penalty (default: 1e-4).","code":""},{"path":"/reference/ridge_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ridge_regression — ridge_regression","text":"list components: coef Estimated coefficient matrix (features × genes)  rss Residual sum squares per gene","code":""},{"path":"/reference/ridge_regression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ridge_regression — ridge_regression","text":"Performs ridge regression using closed-form solution. Can applied model either single gene (vector response) multiple genes (matrix response) using shared regularization penalty.","code":""},{"path":"/reference/ridge_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ridge_regression — ridge_regression","text":"","code":"set.seed(1) X <- matrix(rnorm(200), nrow = 50) G <- matrix(rnorm(150), nrow = 50) fit <- ridge_regression(X, G) #> Error in ridge_regression(X, G): could not find function \"ridge_regression\" str(fit) #> Error in str(fit): object 'fit' not found"},{"path":"/reference/scatterpie.html","id":null,"dir":"Reference","previous_headings":"","what":"scatterpie — scatterpie","title":"scatterpie — scatterpie","text":"Plot Cluster Compositions Scatterpie Chart Connectivity Edges","code":""},{"path":"/reference/scatterpie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scatterpie — scatterpie","text":"","code":"scatterpie(   scatter_coord,   composition,   connectivity = NULL,   connectivity_thresh = 0.5,   dims = c(\"umap_1\", \"umap_2\"),   cluster_col = \"cluster\",   edge_color = \"lightgrey\",   edge_alpha = 1,   label_size = 5 )"},{"path":"/reference/scatterpie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scatterpie — scatterpie","text":"scatter_coord data frame coordinates (e.g., UMAP spatial centroids), one row per cluster. composition numeric matrix data frame (number rows `scatter_coord`) row gives proportions counts categories. connectivity Optional. square matrix indicating edge weights (e.g., similarity shared connectivity) clusters. connectivity_thresh Numeric threshold edges shown (default: 0.5). dims character vector length 2 specifying coordinate column names `scatter_coord` (default: `c(\"umap_1\", \"umap_2\")`). cluster_col Character. column `scatter_coord` contains cluster group labels annotation (default: `\"cluster\"`). edge_color Color connectivity edges (default: `\"lightgrey\"`). edge_alpha Alpha transparency edges (default: 1). label_size Numeric size cluster label text (default: 5).","code":""},{"path":"/reference/scatterpie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scatterpie — scatterpie","text":"list `ggplot2` layers (can added base ggplot using `+`) including: geom_segment (optional) edges connected clusters geom_scatterpie pie chart layer showing cluster composition geom_text_repel cluster labels theme_classic plot styling","code":""},{"path":"/reference/scatterpie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scatterpie — scatterpie","text":"Creates `ggplot2` layer list showing pie charts spatial embedding coordinates, pie represents relative composition categories (e.g., cell types, fates) per cluster region. Optionally overlays connectivity edges clusters based provided adjacency matrix.","code":""},{"path":"/reference/scatterpie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scatterpie — scatterpie","text":"","code":"if (FALSE) { library(scatterpie) coords <- data.frame(umap_1 = rnorm(5), umap_2 = rnorm(5), cluster = letters[1:5]) comp <- matrix(runif(5 * 3), nrow = 5) colnames(comp) <- c(\"A\", \"B\", \"C\") comp <- comp / rowSums(comp) scatterpie(coords, comp) }"},{"path":"/reference/soft_cluster_gam_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"soft_cluster_gam_fit — soft_cluster_gam_fit","title":"soft_cluster_gam_fit — soft_cluster_gam_fit","text":"Fit Soft Cluster-Specific GAMs Ridge Regularization","code":""},{"path":"/reference/soft_cluster_gam_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"soft_cluster_gam_fit — soft_cluster_gam_fit","text":"","code":"soft_cluster_gam_fit(G, t, P, df = 5, lambda = 1e-04, test = \"F\")"},{"path":"/reference/soft_cluster_gam_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"soft_cluster_gam_fit — soft_cluster_gam_fit","text":"G matrix gene expression values (genes × cells). t numeric vector pseudotime values (length = number cells). P soft cluster assignment matrix (cells × clusters), rows sum 1. df Degrees freedom spline basis (default: 5). lambda Ridge regularization strength (default: 1e-4). test Statistical test use model comparison: `\"F\"` (default) `\"LRT\"` (likelihood ratio test).","code":""},{"path":"/reference/soft_cluster_gam_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"soft_cluster_gam_fit — soft_cluster_gam_fit","text":"list components: stat data frame test statistic, p-value, mean expression difference, Cohen's d gene  df Degrees freedom used test  coef Fitted coefficients full model  design_null Design matrix null model  design_full Design matrix full model","code":""},{"path":"/reference/soft_cluster_gam_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"soft_cluster_gam_fit — soft_cluster_gam_fit","text":"Fits generalized additive model (GAM) gene expression along pseudotime using soft cluster assignments. model compares shared smooth (null model) cluster-specific smooths (full model), using ridge regression F likelihood ratio tests.","code":""},{"path":"/reference/soft_cluster_gam_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"soft_cluster_gam_fit — soft_cluster_gam_fit","text":"","code":"# Example pseudotime, profiles, and expression matrix setup set.seed(123) t <- seq(0, 1, length.out = 100) P <- matrix(runif(300), nrow = 100) P <- P / rowSums(P) G <- matrix(rnorm(500), nrow = 5) fit <- soft_cluster_gam_fit(G, t, P, df = 3) head(fit$stat) #>        stat      pval    mean_diff        cohen #> 1 0.7847855 0.6172285  0.785680855  0.708225587 #> 2 0.4980950 0.8545586  0.661185867  0.778625761 #> 3 0.7429910 0.6533914 -0.621810882 -0.700928364 #> 4 1.3263654 0.2410829  0.005949389  0.005999336 #> 5 1.5342015 0.1569317 -0.218150387 -0.235564932"},{"path":"/reference/sparse_manupulation.html","id":null,"dir":"Reference","previous_headings":"","what":"sparse_manupulation — sparse_manupulation","title":"sparse_manupulation — sparse_manupulation","text":"Apply Transformation Function Sparse Matrix","code":""},{"path":"/reference/sparse_manupulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sparse_manupulation — sparse_manupulation","text":"","code":"sparse_manupulation(mat, func)"},{"path":"/reference/sparse_manupulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sparse_manupulation — sparse_manupulation","text":"mat sparse matrix (class `dgCMatrix`). func function apply values (e.g., `log`, `exp`, custom).","code":""},{"path":"/reference/sparse_manupulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sparse_manupulation — sparse_manupulation","text":"sparse matrix transformed values.","code":""},{"path":"/reference/sparse_manupulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sparse_manupulation — sparse_manupulation","text":"Applies user-defined function non-zero entries sparse matrix returns new sparse matrix.","code":""},{"path":"/reference/sparse_manupulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sparse_manupulation — sparse_manupulation","text":"","code":"library(Matrix) mat <- rsparsematrix(5, 5, density = 0.5) transformed <- sparse_manupulation(mat, log1p) #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `dis = func(x)`. #> Caused by warning in `func()`: #> ! NaNs produced print(transformed) #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>             1         2         3         4           5 #> 1         NaN .         .         0.1133287  0.03149867 #> 2  .          .         0.8754687 .          .          #> 3 -0.02839947 .         .         1.0986123 -0.17435339 #> 4  0.45107562 .         0.5709795 0.4317824  .          #> 5  .          0.6205765 .         0.1906204  ."},{"path":"/reference/sparse_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"sparse_norm — sparse_norm","title":"sparse_norm — sparse_norm","text":"Normalize Sparse Matrix Rows Columns","code":""},{"path":"/reference/sparse_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sparse_norm — sparse_norm","text":"","code":"sparse_norm(mat, dim = 1)"},{"path":"/reference/sparse_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sparse_norm — sparse_norm","text":"mat sparse matrix (class `dgCMatrix`). dim Integer. Dimension normalize : `1` = rows (default), `2` = columns.","code":""},{"path":"/reference/sparse_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sparse_norm — sparse_norm","text":"sparse matrix normalized values.","code":""},{"path":"/reference/sparse_norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sparse_norm — sparse_norm","text":"Applies row-wise column-wise L1 normalization sparse matrix. Returns new sparse matrix normalized entries, preserving sparsity.","code":""},{"path":"/reference/sparse_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sparse_norm — sparse_norm","text":"","code":"library(Matrix) m <- rsparsematrix(5, 5, density = 0.4) norm_mat <- sparse_norm(m, dim = 1) print(norm_mat) #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                                                        #> [1,] .         0.3953488 0.6046512 .         .         #> [2,] 0.2794118 .         .         0.7205882 .         #> [3,] 0.3596491 .         .         .         0.6403509 #> [4,] .         .         .         1.0000000 .         #> [5,] 0.3575130 .         0.5181347 .         0.1243523"},{"path":"/reference/sync_sparse_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"sync_sparse_rows — sync_sparse_rows","title":"sync_sparse_rows — sync_sparse_rows","text":"Synchronize Rows Sparse Matrix Match Target Row Names","code":""},{"path":"/reference/sync_sparse_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sync_sparse_rows — sync_sparse_rows","text":"","code":"sync_sparse_rows(sparse_mat, target_rownames)"},{"path":"/reference/sync_sparse_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sync_sparse_rows — sync_sparse_rows","text":"sparse_mat sparse matrix class `dgCMatrix`, rownames defined. target_rownames character vector desired rownames final matrix.","code":""},{"path":"/reference/sync_sparse_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sync_sparse_rows — sync_sparse_rows","text":"sparse matrix number columns rownames exactly matching `target_rownames`.","code":""},{"path":"/reference/sync_sparse_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sync_sparse_rows — sync_sparse_rows","text":"Ensures sparse matrix class `dgCMatrix` rows exactly match target set row names. Adds missing rows filled zeros necessary, reorders existing rows match specified order. useful aligning matrices different sources (e.g., profiles, probabilities, annotations) cases missing rows treated zero.","code":""},{"path":"/reference/sync_sparse_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sync_sparse_rows — sync_sparse_rows","text":"","code":"library(Matrix) mat <- rsparsematrix(3, 4, density = 0.5) rownames(mat) <- c(\"A\", \"B\", \"C\") synced <- sync_sparse_rows(mat, target_rownames = c(\"A\", \"B\", \"C\", \"D\")) dim(synced)  # Should be 4 x 4 #> [1] 4 4"},{"path":"/reference/top_k.html","id":null,"dir":"Reference","previous_headings":"","what":"top_k — top_k","title":"top_k — top_k","text":"Extract Top-k Elements Numeric Vector","code":""},{"path":"/reference/top_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"top_k — top_k","text":"","code":"top_k(v, k, decreasing = FALSE)"},{"path":"/reference/top_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"top_k — top_k","text":"v numeric vector. k Integer. Number top elements return. decreasing Logical. `TRUE`, returns `k` largest values (default: `FALSE` = smallest).","code":""},{"path":"/reference/top_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"top_k — top_k","text":"numeric vector length `k` containing top `k` values.","code":""},{"path":"/reference/top_k.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"top_k — top_k","text":"Returns top `k` elements numeric vector, sorted ascending descending order.","code":""},{"path":"/reference/umap_from_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"umap_from_knn — umap_from_knn","title":"umap_from_knn — umap_from_knn","text":"Compute UMAP Embedding kNN Graph","code":""},{"path":"/reference/umap_from_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"umap_from_knn — umap_from_knn","text":"","code":"umap_from_knn(adj, n_neighbors = 5, seed = 1024)"},{"path":"/reference/umap_from_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"umap_from_knn — umap_from_knn","text":"adj sparse adjacency matrix (class `dgCMatrix`) representing kNN graph. n_neighbors Integer. Minimum number neighbors required per node (default: 5). seed Integer. Random seed UMAP initialization (default: 1024).","code":""},{"path":"/reference/umap_from_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"umap_from_knn — umap_from_knn","text":"data frame columns `umap_1` `umap_2` rownames matching input adjacency matrix.","code":""},{"path":"/reference/umap_from_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"umap_from_knn — umap_from_knn","text":"Runs UMAP filtered kNN adjacency matrix, ensuring nodes least `n_neighbors`. Assumes embedding computed via Python-based backend (e.g., `umap_from_knn_py()`). function filters graph remove low-degree nodes computing UMAP.","code":""},{"path":"/reference/wide2long.html","id":null,"dir":"Reference","previous_headings":"","what":"wide2long — wide2long","title":"wide2long — wide2long","text":"Convert Matrix Long Format","code":""},{"path":"/reference/wide2long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wide2long — wide2long","text":"","code":"wide2long(mat)"},{"path":"/reference/wide2long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wide2long — wide2long","text":"mat numeric matrix data frame.","code":""},{"path":"/reference/wide2long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wide2long — wide2long","text":"data frame long format columns: Row index j Column index (numeric) value Matrix entry (, j)","code":""},{"path":"/reference/wide2long.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wide2long — wide2long","text":"Converts numeric matrix data frame long-format data frame integer-based ``, `j`, `value` columns.","code":""},{"path":"/reference/wide2long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wide2long — wide2long","text":"","code":"mat <- matrix(1:9, nrow = 3) long_df <- wide2long(mat) head(long_df) #>   i j value #> 1 1 1     1 #> 2 1 2     4 #> 3 1 3     7 #> 4 2 1     2 #> 5 2 2     5 #> 6 2 3     8"}]
